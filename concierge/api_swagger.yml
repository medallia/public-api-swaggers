info:
  title: Combined Zingle API Documentation
  version: '1.0'
paths:
  /analytics/service-group:
    post:
      consumes:
      - application/json
      operationId: build-service-group
      parameters:
      - in: body
        name: body
        schema:
          properties:
            collection_id:
              pattern: ^[a-f\d]{8}\-[a-f\d]{4}\-[a-f\d]{4}\-[a-f\d]{4}\-[a-f\d]{12}
              type: string
            filters:
              items:
                properties:
                  field_id:
                    pattern: ^[a-f\d]{8}\-[a-f\d]{4}\-[a-f\d]{4}\-[a-f\d]{4}\-[a-f\d]{12}
                    type: string
                  values:
                    items:
                      type: string
                    type: array
                type: object
              type:
              - string
              - array
          type: object
        x-examples:
          application/json:
            collection_id: 5e2371d3-b1d6-ae19-733f-c8eb2887c43a
            filters:
            - field_id: 3e1d1a56-4792-3ffd-58ed-580bbc5540f1
              values:
              - select
              - premium
            - field_id: 435e4c67-b400-853e-857e-d8590dc7da9b
              values:
              - west
      produces:
      - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json:
              service_group_id: 5543a5d4-5d0a-e598-43df-5fb4953f588f
          schema:
            properties:
              service_group_id:
                pattern: ^[a-f\d]{8}\-[a-f\d]{4}\-[a-f\d]{4}\-[a-f\d]{4}\-[a-f\d]{12}
                type: string
            type: object
      summary: Build a group of services from an array of collection properties
      tags:
      - Analytics
      x-private: true
  /calendar/templates:
    get:
      responses:
        '200':
          description: ''
          schema:
            items:
              properties:
                code:
                  type: string
                description:
                  type: string
                displayName:
                  type: string
              type: object
            type: array
      summary: List of all available templates
      tags:
      - Calendar Events
  /notification/{userId}/preferences:
    parameters:
    - in: path
      name: userId
      required: true
      type: string
    put:
      parameters:
      - $ref: '#/parameters/userId'
      - in: body
        name: body
        schema:
          properties:
            desktop:
              format: int32
              maximum: 15
              minimum: 0
              type: integer
            email:
              format: int32
              maximum: 15
              minimum: 0
              type: integer
            mobile:
              format: int32
              maximum: 15
              minimum: 0
              type: integer
          type: object
        x-examples:
          application/json:
            desktop: 5
            email: 8
            mobile: 2
      responses:
        '200':
          description: ''
          schema:
            properties:
              desktop:
                maximum: 15
                minimum: 0
                type: integer
              email:
                maximum: 15
                minimum: 0
                type: integer
              mobile:
                maximum: 15
                minimum: 0
                type: integer
              user:
                properties:
                  email:
                    type: string
                  firstName:
                    type:
                    - 'null'
                    - string
                  id:
                    type: integer
                  lastName:
                    type:
                    - 'null'
                    - string
                  phoneNumber:
                    type:
                    - 'null'
                    - string
                  status:
                    type: string
                  title:
                    type:
                    - 'null'
                    - string
                  username:
                    type: string
                  uuid:
                    format: uuid
                    type: string
                type: object
            type: object
      security:
      - jwt: []
      summary: Update notification preferences
  /oauth/exchange:
    post:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            code:
              description: Access code from successful oauth request.
              type: string
            provider:
              description: Either provider code or IDP id.
              type: string
          required:
          - provider
          - code
          type: object
        x-examples: {}
      responses:
        '200':
          description: ''
          schema:
            properties:
              token:
                description: JWT Token for user.
                type: string
            type: object
        '400':
          description: For various bad responses, body of response should contain
            a reason.
        '404':
          description: For unknown identities or providers.
        '418':
          description: "For \xAF\\_(\u30C4)/\xAF errors"
      summary: Exchange an access code for a jwt token
      tags:
      - Security
  /organizations:
    get:
      parameters:
      - default: '1'
        in: path
        name: page
        required: true
        type: number
      - default: Org Name
        in: path
        name: query
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            properties:
              _links:
                properties:
                  self:
                    format: uri
                    type: string
                type: object
              currentPage:
                type: number
              items:
                items:
                  properties:
                    createdAt:
                      format: date-time
                      type: string
                    displayName:
                      type: string
                    id:
                      format: uuid
                      type: string
                    updatedAt:
                      format: date-time
                      type: string
                    users:
                      items:
                        properties:
                          avatarUrl:
                            type:
                            - string
                            - 'null'
                          email:
                            format: email
                            type: string
                          firstName:
                            type:
                            - string
                            - 'null'
                          id:
                            type: number
                          lastName:
                            type:
                            - string
                            - 'null'
                          organizationId:
                            format: uuid
                            type: string
                          roleId:
                            type: number
                          username:
                            type: string
                          uuid:
                            format: uuid
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
              lastPage:
                type: number
              perPage:
                type: number
              total:
                type: number
            type: object
      security:
      - basic: []
      summary: Paginate organizations
      tags:
      - Organizations
    post:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            displayName:
              type: string
          required:
          - displayName
          type: object
        x-examples:
          application/json:
            displayName: Lorem Ipsum
      responses:
        '202':
          description: ''
          headers:
            Location:
              default: https://api.zingle.me/v2/organizations/00000000-0000-0000-0000-000000000000
              description: URI of Org
              pattern: https://api.zingle.me/v2/organizations/{organizationId}
              type: string
          schema:
            properties: {}
            type: object
      summary: Create an organization
      tags:
      - Organizations
  /organizations/{organizationId}:
    delete:
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Delete organization
      tags:
      - Organizations
      x-private: true
    get:
      responses:
        '200':
          description: ''
          schema:
            properties:
              createdAt:
                format: date-time
                type: string
              displayName:
                type: string
              id:
                format: uuid
                type: string
              updatedAt:
                format: date-time
                type: string
              users:
                items:
                  properties:
                    avatarUrl:
                      type:
                      - string
                      - 'null'
                    email:
                      format: email
                      type: string
                    firstName:
                      type:
                      - string
                      - 'null'
                    id:
                      type: number
                    lastName:
                      type:
                      - string
                      - 'null'
                    organizationId:
                      format: uuid
                      type: string
                    roleId:
                      type: number
                    username:
                      type: string
                    uuid:
                      format: uuid
                      type: string
                  type: object
                type: array
            type: object
      summary: Retrieve organization
      tags:
      - Organizations
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    put:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            displayName:
              type: string
          type: object
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Update organization
      tags:
      - Organizations
  /organizations/{organizationId}/bulk-import/{integration}:
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    - in: path
      name: integration
      required: true
      type: string
    post:
      consumes:
      - text/plain
      description: Imports a delimited file (CSV, TSV, pipe-delimited) for an organization
        using the organization's current import mapping configuration.
      operationId: organization-contact-import
      parameters:
      - in: body
        name: body
        schema:
          description: Base64-encoded file to import
          type: string
        x-examples:
          text/plain: Rmlyc3QgTmFtZSxMYXN0IE5hbWUsUGhvbmUKTGVlbG9vLERhbGxhcywrMTQwNjU1NTEyMTI=
      produces:
      - application/json
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Bulk Import Contacts into Organization Services
      tags:
      - Organization Contact Imports
  /organizations/{organizationId}/contact-fields:
    get:
      responses:
        '200':
          description: ''
        '404':
          description: When organization missing or organization has no services.
      security:
      - jwt: []
      summary: List Organization Contact Fields
      tags:
      - Contact Fields
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
  /organizations/{organizationId}/contact-import-configurations/{integration}:
    delete:
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      security:
      - bearer: []
      summary: Disable integration mapping for organization
      tags:
      - Organization Contact Imports
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    - in: path
      name: integration
      required: true
      type: string
    post:
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      security:
      - bearer: []
      summary: Enable integration mapping on organization.
      tags:
      - Organization Contact Imports
    put:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            beginAtRow:
              type: integer
            mapping:
              type: object
          type: object
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      security:
      - bearer: []
      summary: Add mapping configuration for organization integration
      tags:
      - Organization Contact Imports
  /organizations/{organizationId}/events:
    get:
      parameters:
      - format: date-time
        in: query
        name: start
        type: string
      - format: date-time
        in: query
        name: end
        type: string
      - in: query
        name: group_by_contact
        type: boolean
      - $ref: '#/parameters/organizationId'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              _links:
                next: https://api.zingle.me/v2/organizations/c787d4f4-867f-4b2f-8c18-828b87f42466/events?page=2
                self: https://api.zingle.me/v2/organizations/c787d4f4-867f-4b2f-8c18-828b87f42466/events?page=1
              currentPage: 1
              items:
              - body: 'We need help here! '
                contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T15:05:03+0000
                id: 5b46b798-4b52-4bc7-aef9-2773476c5f3a
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - body: 'We need help here! '
                contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T15:06:20+0000
                id: f46aeebb-f19c-486f-bfd1-704f4a8cb348
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - body: 'We need help here! '
                contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T15:09:29+0000
                id: 1f9c6447-684c-46c0-a277-5a72ad4c5f8b
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - body: 'We need help here! '
                contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T15:16:36+0000
                id: 7bc72425-b58e-4536-8f6b-53d84e7f1bc1
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - body: We need help here! tiger
                contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T15:24:09+0000
                id: 85373292-b18c-48ac-8f74-025ca12c6316
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T21:08:42+0000
                id: df3f374c-51ed-4456-80d5-fb71727b4cef
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: workflow_started
                workflow:
                  id: 3
                  name: notes
              - contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T21:08:43+0000
                id: 81557a55-5b96-40c4-977c-90c9935224e4
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                workflow:
                  id: 3
                  name: notes
              - contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T21:09:32+0000
                id: 747fe98d-441d-4a1c-b4d2-9d2de5115fac
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: workflow_ended
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: 3
                  name: notes
              - contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:09:37+0000
                id: 9a5c4fc0-caa7-49f6-bec6-8a05f7d32f5f
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: mark_confirmed
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:09:47+0000
                id: e00c3b9a-d756-4636-b428-cc498dd8bfc3
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: workflow_started
                workflow:
                  id: 3
                  name: notes
              - contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:09:48+0000
                id: 17e93112-c264-421f-8df9-f0f0b32a4897
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                workflow:
                  id: 3
                  name: notes
              - contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:21:17+0000
                id: a687c882-65c5-4272-bdd7-1dff5fcbc672
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: workflow_ended
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: 3
                  name: notes
              - contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:21:31+0000
                id: 889ce18b-57a2-40db-8eea-9aff90470569
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: workflow_started
                workflow:
                  id: 3
                  name: notes
              - body: hello John Doe
                contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:21:34+0000
                id: 71982dc8-9c20-41f4-a66e-0333fe9e39fe
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                workflow:
                  id: 3
                  name: notes
              lastPage: 10
              perPage: 50
              total: 454
          schema:
            properties: {}
            type: object
      security:
      - jwt: []
      summary: Return events that belong to services in organization
      tags:
      - Organizations
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
  /organizations/{organizationId}/services:
    get:
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - displayName: Active Service
              id: 1
              serviceCode: active_service
              status: active
              uuid: 0db472b5-125a-4afb-90e1-f29af4096434
            - displayName: Cancelled Service
              id: 2
              serviceCode: cancelled_service
              status: cancelled
              uuid: 2e913bfd-6c75-4b3a-8a87-ff4e60afa052
            - displayName: Inactive Service
              id: 3
              serviceCode: null
              status: inactive
              uuid: e4523ff5-85ee-47d2-bc30-8be281099556
          schema:
            items:
              $ref: '#/definitions/service-minimal'
            type: array
        '404':
          description: ''
      security:
      - jwt: []
      summary: Get list of services in organization
      tags:
      - Organizations
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
  /organizations/{organizationId}/services/{serviceId}:
    delete:
      parameters:
      - in: path
        name: organizationId
        required: true
        type: string
      - in: path
        name: serviceId
        required: true
        type: string
      responses:
        '202':
          description: ''
          schema: {}
        '404':
          description: ''
      security:
      - jwt: []
      summary: Remove service from organization
      tags:
      - Organizations
    get:
      responses:
        '200':
          description: ''
          examples:
            application/json:
              displayName: ANKER01
              id: 1
              serviceCode: ANKER01
              status: active
              uuid: 9761695a-f309-4909-b856-f68b1d623bee
          schema:
            $ref: '#/definitions/service-minimal'
        '404':
          description: ''
      security:
      - jwt: []
      summary: View service attributes
      tags:
      - Organizations
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      description: ''
      parameters:
      - in: path
        name: organizationId
        required: true
        type: string
      - in: path
        name: serviceId
        required: true
        type: string
      responses:
        '202':
          description: ''
          schema: {}
        '400':
          description: ''
        '404':
          description: ''
      security:
      - jwt: []
      summary: Add a service to an organization
      tags:
      - Organizations
    put:
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/organization-service-input'
        x-examples:
          application/json:
            serviceCode: ANKER01
            status: active
      responses:
        '202':
          description: ''
          examples:
            application/json:
              displayName: ANKER01
              id: 1
              serviceCode: ANKER01
              status: active
              uuid: 9761695a-f309-4909-b856-f68b1d623bee
          schema:
            $ref: '#/definitions/service-minimal'
        '400':
          $ref: '#/responses/request-validation-failed'
        '404':
          description: ''
      security:
      - jwt: []
      summary: Edit service attributes
      tags:
      - Organizations
  /organizations/{organizationId}/tokens:
    get:
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - createdAt: '1992-05-02T07:09:52.261Z'
              createdBy:
                avatarUrl: https://gravatar.com/avatar/fa67218e3c2a6ad4f00e156721b6657f?s=400&d=robohash&r=x
                email: jonhdoe@zingleme.com
                firstName: John
                id: 1
                lastName: Doe
                title: Mr.
                username: john_doe
                uuid: 47be3c57-3e90-9e6f-9448-29d0657708a1
              description: One Token to rule them all
              displayName: One Token
              id: 1
              role: organization_administrator
              token: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
              updatedAt: '1942-07-05T16:53:38.723Z'
              uuid: fb89f87c-e97f-47af-3c5f-69e2f8a133cb
          schema:
            items:
              $ref: '#/definitions/org-token'
            type: array
        '401':
          description: ''
        '404':
          description: ''
          examples: {}
      security:
      - jwt: []
      summary: List Org-level authorization tokens
      tags:
      - Organizations
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    post:
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/org-token-input'
        x-examples:
          application/json:
            description: One Token to rule them all
            displayName: One Token
            role: organization_administrator
      responses:
        '201':
          description: ''
          examples:
            application/json:
              createdAt: '1992-05-02T07:09:52.261Z'
              createdBy:
                avatarUrl: https://gravatar.com/avatar/fa67218e3c2a6ad4f00e156721b6657f?s=400&d=robohash&r=x
                email: jonhdoe@zingleme.com
                firstName: John
                id: 1
                lastName: Doe
                title: Mr.
                username: john_doe
                uuid: 47be3c57-3e90-9e6f-9448-29d0657708a1
              description: One Token to rule them all
              displayName: One Token
              id: 1
              role: organization_administrator
              token: vgjBe55j9Qk8c6B8l8PTFlNGo1Se2laDOuhSMMaTKs8dKKDY5qLn0GBbTDNj9vJmvxNdTgxlXmtzIP1QMs7pnRiJcyHeN2rRm4QuZHAWGwrgiFK7EhNG6ewIwfma5y51
              updatedAt: '1942-07-05T16:53:38.723Z'
              uuid: fb89f87c-e97f-47af-3c5f-69e2f8a133cb
          schema:
            $ref: '#/definitions/org-token'
        '400':
          $ref: '#/responses/request-validation-failed'
          examples:
            application/json:
              code: voluptate commodo irure consectetur culpa
              description: 'dolore '
        '401':
          description: ''
        '404':
          description: ''
      security:
      - jwt: []
      summary: Create an Org-level authorization token
      tags:
      - Organizations
  /organizations/{organizationId}/tokens/{tokenId}:
    delete:
      responses:
        '204':
          description: ''
          examples: {}
          schema: {}
        '401':
          description: ''
        '404':
          description: ''
      security:
      - jwt: []
      summary: Delete an Org-level authorization token
      tags:
      - Organizations
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    - in: path
      name: tokenId
      required: true
      type: string
    put:
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/org-token-input'
        x-examples:
          application/json:
            description: One Token to rule them all
            displayName: One Token
            role: organization_administrator
      responses:
        '202':
          description: ''
          examples:
            application/json:
              createdAt: '1992-05-02T07:09:52.261Z'
              createdBy:
                avatarUrl: https://gravatar.com/avatar/fa67218e3c2a6ad4f00e156721b6657f?s=400&d=robohash&r=x
                email: jonhdoe@zingleme.com
                firstName: John
                id: 1
                lastName: Doe
                title: Mr.
                username: john_doe
                uuid: 47be3c57-3e90-9e6f-9448-29d0657708a1
              description: One Token to rule them all
              displayName: One Token
              id: 1
              role: organization_administrator
              token: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
              updatedAt: '1942-07-05T16:53:38.723Z'
              uuid: fb89f87c-e97f-47af-3c5f-69e2f8a133cb
          schema:
            $ref: '#/definitions/org-token'
        '401':
          description: ''
        '404':
          description: ''
      security:
      - jwt: []
      summary: Update an Org-level authorization token
      tags:
      - Organizations
  /organizations/{organizationId}/users:
    get:
      parameters:
      - description: Query term
        in: query
        name: q
        type: string
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: User organization search
      tags:
      - Organizations
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    post:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            email:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            role:
              type: string
          type: object
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
        '400':
          description: No matching role
        '406':
          description: Matching user is unassignable
      summary: Add user to organization
      tags:
      - Organizations
  /organizations/{organizationId}/users/{userId}:
    delete:
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
        '406':
          description: Unable to remove given user from organization
      summary: Remove user from organization
      tags:
      - Organizations
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    - in: path
      name: userId
      required: true
      type: string
    put:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            role:
              type: string
          type: object
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Update user org role
      tags:
      - Organizations
  /organizations/{organizationId}/webhooks:
    get:
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - enabled: false
              events:
              - optin_change
              headers:
              - key: Authorization
                value: Bearer CzphqdPEEWPP9xJWTqiWXyDp3CvNB54Farqo979Ro1v0zWH3
              - key: Content-Type
                value: application/json
              id: cff8257d-33f4-5527-5d40-a60610d87ab5
              url: https://webhook.site/19333938-cfed-4b54-b209-39eb5def6d2e
            - enabled: true
              events:
              - contact_created
              - contact_updated
              - contact_deleted
              headers:
              - key: Content-Type
                value: application/json
              - key: Authorization
                value: Bearer CzphqdPEEWPP9xJWTqiWXyDp3CvNB54Farqo979Ro1v0zWH3
              id: b7eeb230-a045-d630-5b92-0ce90f4d8414
              url: https://webhook.site/19333938-cfed-4b54-b209-39eb5def6d2e
            - enabled: true
              events:
              - conversation_closed
              headers:
              - key: Content-Type
                value: application/json
              - key: Authorization
                value: Bearer CzphqdPEEWPP9xJWTqiWXyDp3CvNB54Farqo979Ro1v0zWH3
              id: 71c5304e-33ab-d1e6-115b-fbe287c1ca8e
              url: hhttps://webhook.site/19333938-cfed-4b54-b209-39eb5def6d2e
          schema:
            items:
              $ref: '#/definitions/webhook'
            type: array
        '401':
          description: ''
      security:
      - jwt: []
      summary: List Org-level webhooks
      tags:
      - Organizations
      - Webhooks
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    post:
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/webhook-input'
        x-examples:
          application/json:
            enabled: true
            events:
            - contact_created
            - contact_updated
            - contact_deleted
            headers:
            - key: Content-Type
              value: application/json
            - key: Authorization
              value: Bearer CzphqdPEEWPP9xJWTqiWXyDp3CvNB54Farqo979Ro1v0zWH3
            url: https://webhook.site/19333938-cfed-4b54-b209-39eb5def6d2e
      responses:
        '201':
          description: ''
          examples: {}
          schema: {}
        '400':
          $ref: '#/responses/request-validation-failed'
        '401':
          description: ''
      security:
      - jwt: []
      summary: Create an Org-level webhook
      tags:
      - Organizations
      - Webhooks
    put:
      description: Sync webhooks. If webhooks data has ID property then existing webhook
        will be updated, new webhook is created otherwise
      parameters:
      - description: If webhooks data has ID property then existing webhook will be
          updated, new webhook is created otherwise
        in: body
        name: body
        schema:
          items:
            allOf:
            - format: uuid
              properties:
                id:
                  format: uuid
                  pattern: ^[a-f\d]{8}\-[a-f\d]{4}\-[a-f\d]{4}\-[a-f\d]{4}\-[a-f\d]{12}
                  type: string
              type: object
            - $ref: '#/definitions/webhook-input'
          type: array
        x-examples:
          application/json:
          - enabled: false
            events:
            - optin_change
            headers:
            - key: Authorization
              value: Bearer CzphqdPEEWPP9xJWTqiWXyDp3CvNB54Farqo979Ro1v0zWH3
            - key: Content-Type
              value: application/json
            id: cff8257d-33f4-5527-5d40-a60610d87ab5
            url: https://webhook.site/19333938-cfed-4b54-b209-39eb5def6d2e
          - enabled: true
            events:
            - contact_created
            - contact_updated
            - contact_deleted
            headers:
            - key: Content-Type
              value: application/json
            - key: Authorization
              value: Bearer CzphqdPEEWPP9xJWTqiWXyDp3CvNB54Farqo979Ro1v0zWH3
            url: https://webhook.site/19333938-cfed-4b54-b209-39eb5def6d2e
      responses:
        '202':
          description: ''
          examples: {}
          schema: {}
        '400':
          $ref: '#/responses/request-validation-failed'
        '401':
          description: ''
      security:
      - jwt: []
      summary: Sync Org-level webhooks
      tags:
      - Organizations
      - Webhooks
  /organizations/{organizationId}/webhooks/{webhookId}:
    delete:
      responses:
        '204':
          description: ''
          schema: {}
        '401':
          description: ''
      security:
      - jwt: []
      summary: Delete an Org-level webhook
      tags:
      - Organizations
      - Webhooks
    get:
      responses:
        '200':
          description: ''
          examples:
            application/json:
              enabled: true
              events:
              - contact_created
              - contact_updated
              - contact_deleted
              headers:
              - key: Content-Type
                value: application/json
              - key: Authorization
                value: Bearer CzphqdPEEWPP9xJWTqiWXyDp3CvNB54Farqo979Ro1v0zWH3
              id: b7eeb230-a045-d630-5b92-0ce90f4d8414
              url: https://webhook.site/19333938-cfed-4b54-b209-39eb5def6d2e
          schema:
            $ref: '#/definitions/webhook'
        '401':
          description: ''
      security:
      - jwt: []
      summary: Get an Org-level webhook
      tags:
      - Organizations
      - Webhooks
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    - in: path
      name: webhookId
      required: true
      type: string
    put:
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/webhook-input'
        x-examples:
          application/json:
            enabled: false
            events:
            - contact_updated
            - optin_change
            - contact_created
            - contact_created
            headers:
            - key: do E
              value: et esse sit adipisicing
            - key: eiusmod
              value: commodo laborum
            - key: fugiat
              value: commodo c
            - key: in adipisicing consectetur
              value: ea
            - key: sunt
              value: in fugiat eiusmod id est
            url: https://FV
      responses:
        '202':
          description: ''
          schema: {}
        '400':
          $ref: '#/responses/request-validation-failed'
        '401':
          description: ''
      security:
      - jwt: []
      summary: Update an Org-level webhook
      tags:
      - Organizations
      - Webhooks
  /organizations/{organizationId}/webhooks/{webhookId}/disable:
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    - in: path
      name: webhookId
      required: true
      type: string
    post:
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      security:
      - jwt: []
      summary: Disable an Org-level webhook
      tags:
      - Organizations
      - Webhooks
  /organizations/{organizationId}/webhooks/{webhookId}/enable:
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
    - in: path
      name: webhookId
      required: true
      type: string
    post:
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      security:
      - jwt: []
      summary: Enable an Org-level webhook
      tags:
      - Organizations
      - Webhooks
  /orgs/{org_uuid}/contact-log:
    get:
      operationId: get-orgs-org_uuid-contact-log
      responses:
        '200':
          description: OK
      summary: ''
    parameters:
    - in: path
      name: org_uuid
      required: true
      type: string
  /phone-numbers/provision:
    post:
      operationId: provision-phone-number
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/phone-number-input'
        x-examples:
          application/json:
            country: US
            phone_number: '+18585551212'
            provider: bandwidth
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Provision a phone number
      tags:
      - Phone Numbers
  /provision:
    post:
      consumes:
      - application/json
      operationId: provision
      parameters:
      - in: body
        name: body
        schema:
          properties:
            accounts:
              items:
                properties:
                  billingDayOfMonth:
                    maximum: 31
                    minimum: 1
                    type: integer
                  industry:
                    maxLength: 50
                    minLength: 0
                    type: string
                  name:
                    maxLength: 255
                    minLength: 1
                    type: string
                  salesforceId:
                    maxLength: 100
                    minLength: 10
                    type: string
                  services:
                    items:
                      properties:
                        adminUsers:
                          items:
                            maxLength: 320
                            minLength: 5
                            pattern: \b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b
                            type: string
                          type: array
                        allottedMessages:
                          maximum: 10000000
                          minimum: 1
                          type: integer
                        allottedUsers:
                          maximum: 10000
                          minimum: 1
                          type: integer
                        features:
                          items:
                            enum:
                            - account_manager
                            - account_users
                            - ai_message_categorization
                            - api
                            - assignment
                            - basic_messaging_250
                            - basic_messaging_500
                            - calendar_events
                            - chat
                            - contact_fields
                            - custom_automations
                            - custom_channels
                            - custom_chat
                            - custom_messaging
                            - engagement
                            - facebook_messenger
                            - group_messages
                            - group_messaging
                            - gsm_booster
                            - hospitality_integrations
                            - hotsos_integration
                            - infor
                            - intent_recognition
                            - international_messaging
                            - keyword_automations
                            - labels
                            - legacy_unlimited
                            - maestro
                            - message_translations
                            - mindbody
                            - mms
                            - mms_messages
                            - non_email_usernames
                            - opera_integration
                            - passage_ai
                            - platinum_support
                            - pro_messaging_1000
                            - pro_messaging_2000
                            - quantity_test
                            - quore
                            - registered_contacts
                            - registration_automations
                            - room_status
                            - scheduled_automations
                            - sentiment_analysis
                            - service_forwarding
                            - siteminder
                            - sms_messages
                            - social_messaging
                            - stayntouch
                            - survey_automations
                            - teams
                            - touchtone
                            - touchtone_gold
                            - touchtone_platinum
                            - touchtone_silver
                            - twilio_copilot
                            - twitter_direct_messaging
                            - users
                            - zapier
                            type: string
                          type: array
                        name:
                          maxLength: 255
                          minLength: 1
                          type: string
                        plan:
                          enum:
                          - enterprise_platinum
                          - enterprise_lite
                          - zingle_basic
                          - zingle_pro
                          type: string
                        timeZone:
                          enum:
                          - America/Anchorage
                          - America/Araguaia
                          - America/Argentina/San_Juan
                          - America/Bahia
                          - America/Belem
                          - America/Boa_Vista
                          - America/Campo_Grande
                          - America/Chicago
                          - America/Cuiaba
                          - America/Denver
                          - America/Fortaleza
                          - America/Los_Angeles
                          - America/Maceio
                          - America/Manaus
                          - America/New_York
                          - America/Phoenix
                          - America/Porto_Velho
                          - America/Recife
                          - America/Regina
                          - America/Rio_branco
                          - America/Sao_Paulo
                          - Asia/Dubai
                          - Asia/Tokyo
                          - Australia/ACT
                          - Australia/Adelaide
                          - Australia/Brisbane
                          - Australia/Broken_Hill
                          - Australia/Canberra
                          - Australia/Currie
                          - Australia/Darwin
                          - Australia/Eucla
                          - Australia/Hobart
                          - Australia/LHI
                          - Australia/Lindeman
                          - Australia/Lord_Howe
                          - Australia/Melbourne
                          - Australia/North
                          - Australia/NSW
                          - Australia/Perth
                          - Australia/Queensland
                          - Australia/South
                          - Australia/Sydney
                          - Australia/Tasmania
                          - Australia/Victoria
                          - Australia/West
                          - Australia/Yancowinna
                          - Canada/Atlantic
                          - Canada/Central
                          - Canada/Eastern
                          - Canada/Mountain
                          - Canada/Newfoundland
                          - Canada/Pacific
                          - Canada/Saskatchewan
                          - Etc/GMT-4
                          - Europe/Amsterdam
                          - Europe/Athens
                          - Europe/Berlin
                          - Europe/Dublin
                          - Europe/London
                          - Europe/Paris
                          - Pacific/Honolulu
                          - Pacific/Samoa
                          - UTC
                          type: string
                      required:
                      - name
                      - plan
                      - allottedUsers
                      - allottedMessages
                      - features
                      - timeZone
                      - adminUsers
                      type: object
                    type:
                    - string
                    - array
                required:
                - name
                - billingDayOfMonth
                - salesforceId
                - services
                type: object
              type: array
            notifyAdminUsers:
              type: boolean
          required:
          - notifyAdminUsers
          - accounts
          type: object
        x-examples:
          application/json:
            accounts:
            - billingDayOfMonth: 17
              industry: Hospitality
              name: Nacho Hotel Group
              salesforceId: as97as97d
              services:
              - adminUsers:
                - foo@example.com
                - bar@example.com
                allottedMessages: 10000
                allottedUsers: 20
                features:
                - teams
                - social_messaging
                - scheduled_automations
                name: Foo Resort East
                plan: zingle_basic
                timeZone: America/Los_Angeles
            notifyAdminUsers: true
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      security:
      - jwt: []
      summary: Provision one or more accounts & services
      tags:
      - Services
      x-private: true
  /saml/idps/lookup:
    get:
      parameters:
      - in: query
        name: domainCode
        type: string
      responses:
        '200':
          description: ''
          schema:
            properties:
              certificate:
                type: string
              domainCode:
                type: string
              id:
                type: string
              issuerUri:
                type: string
              logoutUri:
                type: string
              metadataUri:
                type: string
              name:
                type: string
              requireEmail:
                type: boolean
              signOnUri:
                type: string
            type: object
      summary: Look up an IDP by domain code
  /service-collections:
    get:
      description: Lists all service collections that a current user has access to
        through their Service roles
      operationId: list-user-service-collections
      parameters:
      - description: "\tOnly return collections containing the specified service"
        in: query
        name: service_id
        type: string
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - description: null
              fields:
              - id: 1b4a7b4d-9053-4d2e-be19-c7411bde50a8
                name: Region
                values:
                - East
                - West
              id: d3c3c51f-0572-44df-a146-b9c38cc7cc66
              name: Hotel California Grp.
          schema:
            items:
              $ref: '#/definitions/service-collection'
            type: array
      summary: List Service Collections for user
      tags:
      - Service Collections
    post:
      operationId: create-service-collection
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/service-collection-input'
        x-examples:
          application/json:
            description: Service collection for Bob Nacho ownership group A
            name: Hotel Brand A
      responses:
        '200':
          description: ''
          headers:
            Location:
              description: URL to access the service collection
              type: string
          schema:
            properties: {}
            type: object
      summary: Create a Service Collection
      tags:
      - Service Collections
      x-private: true
  /service-collections/all:
    get:
      description: List all service collections
      operationId: list-service-collections
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - description: null
              fields:
              - id: 1b4a7b4d-9053-4d2e-be19-c7411bde50a8
                name: Region
                values:
                - East
                - West
              id: d3c3c51f-0572-44df-a146-b9c38cc7cc66
              name: Hotel California Grp.
          schema:
            items:
              $ref: '#/definitions/service-collection'
            type: array
      summary: List all Service Collections
      tags:
      - Service Collections
      x-private: true
  /service-collections/{serviceCollectionId}:
    delete:
      operationId: delete-service-collection
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Delete a Service Collection
      tags:
      - Service Collections
      x-private: true
    parameters:
    - in: path
      name: serviceCollectionId
      required: true
      type: string
    put:
      description: "\t\t\t"
      operationId: update-service-collection
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/service-collection-input'
        x-examples:
          application/json:
            description: Ownership group for Nacho Hotels, Inc.
            name: Nacho Hotels
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Update Service Collection
      tags:
      - Service Collections
      x-private: true
  /service-collections/{serviceCollectionId}/fields:
    parameters:
    - in: path
      name: serviceCollectionId
      required: true
      type: string
    post:
      operationId: create-service-collection-field
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/service-collection-field-input'
        x-examples:
          application/json:
            name: Region
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Create Service Collection Field
      tags:
      - Service Collections
      x-private: true
  /service-collections/{serviceCollectionId}/fields/{fieldId}:
    delete:
      operationId: delete-service-collection-field
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Delete field from Service Collection
      tags:
      - Service Collections
      x-private: true
    get:
      operationId: update-service-collection-field
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/service-collection-field-input'
        x-examples:
          application/json:
            name: Subregion
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Update service collection field
      tags:
      - Service Collections
      x-private: true
    parameters:
    - in: path
      name: serviceCollectionId
      required: true
      type: string
    - in: path
      name: fieldId
      required: true
      type: string
  /service-collections/{serviceCollectionId}/services:
    get:
      operationId: list-service-collection-services
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - field_values:
                field_name: incididunt in cupidatat
                field_values:
                - field_id: 35e18d4b-a706-fcd7-62f3-17f38e0ce301
                  value: sit
                - field_id: urn:uuid:5bc8bf7d-8020-0725-e206-baf3120b8af2
                  value: dolore laborum aliquip exercitation eiusmod
                - field_id: urn:uuid:6e342ad0-ccc4-cb51-6b24-a81547a08e1c
                  value: deserunt non cillum laborum
              id: urn:uuid:b1fb5287-a18f-e912-d902-2f29d8d43784
              name: commodo cillum
            - field_values:
                field_name: consectetur sit proident
                field_values:
                - field_id: 0152b720-74d9-888c-0e1e-5d02d3f0d4eb
                  value: amet
                - field_id: 6505d400-9964-53eb-13bc-a0d73fbbf4db
                  value: sunt et magna
              id: f5505cb6-23fe-6929-2422-a5b4766280f1
              name: pariatur cillum laboris minim aliqua
          schema:
            items:
              $ref: '#/definitions/service-collection-service'
            type: array
      summary: List Service Collection Services
      tags:
      - Service Collections
    parameters:
    - in: path
      name: serviceCollectionId
      required: true
      type: string
  /service-collections/{serviceCollectionId}/services/{serviceId}:
    delete:
      operationId: remove-service-from-service-collection
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Remove service from service collection
      tags:
      - Service Collections
      x-private: true
    parameters:
    - in: path
      name: serviceCollectionId
      required: true
      type: string
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      operationId: add-service-to-service-collection
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/service-collection-service-input'
        x-examples:
          application/json:
            field_values:
            - field_id: 6895d0de-c75b-b674-4188-fc9e8f4d9fbc
              value: reprehenderit sed aute ullamco
            - field_id: 6d197694-f5a7-f3af-7d17-9bdc82a4580a
              value: adipisicing anim ipsum
            - field_id: urn:uuid:cfcad54d-dfb0-e238-8a80-0bb1dc54b4f4
              value: in id
            - field_id: urn:uuid:90f9ed02-a9bb-31a9-d99e-1a9b34410832
              value: aute aliquip do consectetur Duis
            - field_id: urn:uuid:b351c2ab-43bb-90c3-33e0-b6e053824611
              value: ea nulla
      responses:
        '200':
          description: ''
          examples:
            application/json:
              field_values:
              - field_id: urn:uuid:fa73dc0e-63b1-fa3f-2031-4bede189e0d8
                value: amet nostru
              - field_id: urn:uuid:703b30df-d5d2-cb05-c3db-d09dcfdc8571
                value: eu in ad dolor
          schema:
            $ref: '#/definitions/service-collection-service-input'
      summary: Add service to service collection
      tags:
      - Service Collections
      x-private: true
    put:
      operationId: update-service-for-service-collection
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/service-collection-service-input'
        x-examples:
          application/json:
            field_values:
            - field_id: urn:uuid:273387b6-d588-382c-e31a-403021e3d2d7
              value: consectetur
            - field_id: urn:uuid:80b815a0-245f-7123-58f8-c70d2782f6e8
              value: occaecat eiusmod et Ut
            - field_id: urn:uuid:1bd8f243-00fb-0fdc-71ac-667543005c1d
              value: pariatur
            - field_id: urn:uuid:8993249b-b4bb-d821-a5e1-9c2864204f93
              value: eiusmod
            - field_id: 8e09842f-3b0e-5242-d8f9-92bbe040ad2e
              value: eiusmod esse irure amet
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Update service for service collection
      tags:
      - Service Collections
      x-private: true
  /services:
    get:
      description: "Get list of services, Get list of service within sso org by passing\
        \ sso query params, Get list of service within org by passing org query params,\
        \ Get particular service details with serviceuuid only\n\nAPI response is\
        \ based on user\u2019s permissions:\n\n1) If Org Admin has Manage Accounts\
        \ and Services AND  Manage Organizations permissions, then API will return\
        \ all services, including the SSO services\n2) If Org Admin doesn\u2019t have\
        \ at least one of the permissions mentioned above, then API will only return\
        \ services org admin has access to\n3) If a non-org admin or non-staff user\
        \ attempts to do this, it will return them a 401"
      parameters:
      - description: uuid of sso organization to get list within SSO Org
        in: query
        name: sso
        type: string
      - description: uuid of organization to get list within Organization
        in: query
        name: org
        type: string
      - description: get service by service uuid
        in: query
        name: serviceuuid
        type: string
      - description: search filter by service name
        in: query
        name: query
        type: string
      responses:
        ? ''
        : examples:
          - _links:
              next: string
              self: string
            currentPage: 0
            items:
            - accessible: true
              accountName: string
              id: 0
              name: string
              org: string
              serviceUuid: string
              sso: string
            lastPage: 0
            perPage: 0
            total: 0
          schema:
            properties:
              _links:
                properties:
                  next:
                    type: string
                  self:
                    type: string
                type: object
              currentPage:
                type: integer
              items:
                items:
                  properties:
                    accessible:
                      type: boolean
                    accountName:
                      type: string
                    id:
                      type: integer
                    name:
                      type: string
                    org:
                      type: string
                    serviceUuid:
                      type: string
                    sso:
                      type: string
                  type: object
                type: array
              lastPage:
                type: integer
              perPage:
                type: integer
              total:
                type: integer
            type: object
            x-examples:
              Example 1:
                _links:
                  next: https://api-4.zingle.den.medallia.com/v2/services?page=2
                  self: https://api-4.zingle.den.medallia.com/v2/services?page=1
                currentPage: 1
                items:
                - accessible: true
                  accountName: Chintan Account1
                  id: 1158
                  name: Chintan Service1
                  org: 37314159-6bbe-47c1-8ad9-0dfd34ec5db2
                  serviceUuid: b269c68d-f7a9-4ac7-bf48-3d72ef4dfcac
                  sso: 37314159-6bbe-47c1-8ad9-0dfd34ec5db2
                lastPage: 25
                perPage: 20
                total: 484
        '200':
          description: ''
          examples:
            application/json:
              _links:
                next: string
                self: string
              currentPage: 0
              items:
              - accessible: true
                accountName: string
                id: 0
                name: string
                org: string
                serviceUuid: string
                sso: string
              lastPage: 0
              perPage: 0
              total: 0
          schema:
            properties:
              _links:
                properties:
                  next:
                    type: string
                  self:
                    type: string
                type: object
              currentPage:
                type: integer
              items:
                items:
                  properties:
                    accessible:
                      type: boolean
                    accountName:
                      type: string
                    id:
                      type: integer
                    name:
                      type: string
                    org:
                      type: string
                    serviceUuid:
                      type: string
                    sso:
                      type: string
                  type: object
                type: array
              lastPage:
                type: integer
              perPage:
                type: integer
              total:
                type: integer
            type: object
            x-examples:
              Example 1:
                _links:
                  next: https://api-4.zingle.den.medallia.com/v2/services?page=2
                  self: https://api-4.zingle.den.medallia.com/v2/services?page=1
                currentPage: 1
                items:
                - accessible: true
                  accountName: Chintan Account1
                  id: 1158
                  name: Chintan Service1
                  org: 37314159-6bbe-47c1-8ad9-0dfd34ec5db2
                  serviceUuid: b269c68d-f7a9-4ac7-bf48-3d72ef4dfcac
                  sso: 37314159-6bbe-47c1-8ad9-0dfd34ec5db2
                lastPage: 25
                perPage: 20
                total: 484
      summary: Get list of services
      tags:
      - Services
    parameters: []
  /services/{serviceId}/analytics/report-list:
    get:
      operationId: get-mode-reports
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Get List of Mode Analytics Reports
      tags:
      - Analytics
      x-private: true
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
  /services/{serviceId}/analytics/sign-url:
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      operationId: sign-mode-url
      parameters:
      - in: query
        name: report_id
        type: string
      - in: query
        name: start_date
        type: string
      - in: query
        name: end_date
        type: string
      responses:
        '200':
          description: ''
          schema:
            properties:
              url:
                example: https://modeanalytics.com/zingleme/reports/12345/embed?access_key=16627b8c041e29c333bc23f8&max_age=0&param_end_date=2021-10-08&param_service_id=7ae75519-bff2-4858-b14d-f190a0ba23a3&param_start_date=2020-10-07&timestamp=1633619887&signature=e6278456bf4a03298df510c9a493852bb0389621e4589389a0a3b3c5a86a9fbb
                type: string
            type: object
      summary: Sign Mode Analytics URL
      tags:
      - Analytics
      x-private: true
  /services/{serviceId}/blocked-channels:
    delete:
      operationId: unblock-channel
      parameters:
      - in: body
        name: body
        schema:
          properties:
            channel_type:
              type: string
            channel_value:
              type: string
          required:
          - channel_value
          - channel_type
          type: object
        x-examples:
          application/json:
            channel_type: phone_number
            channel_value: '+14065559696'
      responses:
        '204':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Remove a channel block
      tags:
      - Channels
    get:
      operationId: list-contact-import-log
      parameters:
      - format: date-time
        in: query
        name: range[start]
        required: true
        type: string
      - format: date-time
        in: query
        name: range[end]
        required: true
        type: string
      - in: query
        name: query
        type: string
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - action: ignored
              email: amet
              errors:
              - ea anim dolor exercitation dolor
              - reprehenderit
              - velit sed nostrud dolore in
              - elit
              matchedOn: phone
              name: nulla sint i
              phone: ipsum elit
              receivedAt: '1952-12-12T02:42:43.540Z'
              result: failure
              source: in cillum aute velit
          schema:
            items:
              $ref: '#/definitions/contact-log'
            type: array
      summary: Get a list of entries from the Contact Import Log
      tags:
      - Contact Import Log
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    put:
      operationId: block-channel
      parameters:
      - in: body
        name: body
        schema:
          properties:
            channel_type:
              type: string
            channel_value:
              type: string
            inbound:
              type: boolean
            outbound:
              type: boolean
          required:
          - channel_type
          - channel_value
          - inbound
          - outbound
          type: object
        x-examples:
          application/json:
            channel_type: phone_number
            channel_value: '+14065559696'
            inbound: true
            outbound: true
      responses:
        '204':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Block a channel from sending or receiving messages
      tags:
      - Channels
  /services/{serviceId}/bulk-import/{integration}:
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: integration
      required: true
      type: string
    post:
      consumes:
      - text/plain
      description: Imports a delimited file (CSV, TSV, pipe-delimited) for a service
        using the service's current import mapping configuration.
      operationId: service-contact-import
      parameters:
      - in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json: Rmlyc3QgTmFtZSxMYXN0IE5hbWUsUGhvbmUKTGVlbG9vLERhbGxhcywrMTQwNjU1NTEyMTI=
          schema:
            description: Base64-encoded file to import
            type: string
      summary: Bulk Import Contacts into a Service
      tags:
      - CSV Import
  /services/{serviceId}/calendar/events:
    get:
      responses:
        '200':
          description: ''
          schema:
            items:
              properties:
                allDay:
                  type: boolean
                attendees:
                  items:
                    format: uuid
                    type: string
                  type: array
                description:
                  type: string
                endsAt:
                  format: date-time
                  type: string
                externalId:
                  type: string
                id:
                  type: integer
                startsAt:
                  format: date-time
                  type: string
                title:
                  type: string
                type:
                  properties:
                    fields:
                      items:
                        properties:
                          code:
                            type: string
                          eventType:
                            format: uuid
                            type: string
                          label:
                            type: string
                          template:
                            type: boolean
                          type:
                            type: string
                        type: object
                      type: array
                    id:
                      type: integer
                    name:
                      type: string
                    uuid:
                      format: uuid
                      type: string
                  type: object
                uuid:
                  format: uuid
                  type: string
              type: object
            type: array
      summary: List all calendar events
      tags:
      - Calendar Events
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            allDay:
              type: boolean
            attendees:
              format: uuid
              items:
                type: string
              type: array
              uniqueItems: true
            description:
              type: string
            endsAt:
              format: date-time
              type: string
            startsAt:
              format: date-time
              type: string
            title:
              type: string
            type:
              format: uuid
              type: string
          required:
          - attendees
          - type
          - title
          - startsAt
          - endsAt
          - allDay
          type: object
      responses:
        '201':
          description: ''
          schema: {}
      summary: Create new calendar event
      tags:
      - Calendar Events
    put:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            allDay:
              type: boolean
            attendees:
              format: uuid
              items:
                type: string
              type: array
              uniqueItems: true
            description:
              type: string
            endsAt:
              format: date-time
              type: string
            startsAt:
              format: date-time
              type: string
            title:
              type: string
            type:
              description: '**We don''t allow type updates**. This is because different
                types have differents fields.

                The type must be equal to the type that the calendar event already
                has assigned, otherwise, an error is thrown.'
              format: uuid
              type: string
          type: object
      responses:
        '202':
          description: ''
          schema: {}
      summary: Update calendar event
      tags:
      - Calendar Events
  /services/{serviceId}/calendar/events/bulk-delete:
    delete:
      description: 'Bulk delete calendar events.


        If an error occurs, all changes made by the request will be reverted and an
        error message is returned with an appropriate HTTP code and more information
        in the response body.'
      parameters:
      - in: body
        name: body
        schema:
          properties:
            events:
              format: uuid
              items:
                allOf:
                - format: uuid
                type: string
              type: array
              uniqueItems: true
          required:
          - events
          type: object
        x-examples:
          application/json:
            events:
            - 98bbc92c-a3eb-4a66-91a5-4bc5b2756a9f
            - 35b8fb05-f27b-1a7e-fdac-2c7b6a5b77b4
      - in: path
        name: serviceId
        required: true
        type: string
      responses:
        '204':
          description: Successfully deleted all events.
          schema: {}
        '404':
          description: If at least one event to delete doesn't exist, the whole delete
            operation will be reverted and a 404 returned.
        '500':
          description: Internal server error
      security:
      - basic: []
      summary: Bulk delete calendar events
      tags:
      - Calendar Events
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
  /services/{serviceId}/calendar/events/bulk-upsert:
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      description: 'Bulk create and edit calendar events. If the event object has
        **uuid** the event will be updated, otherwise, a new event will be created.


        If an error occurs, all changes made by the request will be reverted and an
        error message is returned with an appropriate HTTP code and more information
        in the response body.'
      parameters:
      - in: body
        name: body
        schema:
          properties:
            events:
              items:
                properties:
                  allDay:
                    type: boolean
                  attendees:
                    format: uuid
                    items:
                      allOf:
                      - format: uuid
                      type: string
                    type: array
                    uniqueItems: true
                  description:
                    type: string
                  endsAt:
                    format: date-time
                    type: string
                  startsAt:
                    format: date-time
                    type: string
                  title:
                    type: string
                  type:
                    description: '**We don''t allow type updates**. This is because
                      different types have differents fields.

                      In an update, the type must be equal to the type that the calendar
                      event already has assigned, otherwise, an error is thrown.'
                    format: uuid
                    type: string
                  uuid:
                    description: Create new calendar event if not present
                    format: uuid
                    type: string
                type: object
              type: array
          type: object
        x-examples:
          application/json:
            events:
            - allDay: true
              attendees:
              - urn:uuid:d2c82cf2-0baf-3b60-ead5-a5fc8fe4cca9
              description: ''
              endsAt: '1964-07-23T19:50:49.968Z'
              startsAt: '1991-05-06T14:41:59.791Z'
              title: ex velit
              type: d82bf522-ca07-2a19-2bda-6f538e6c21d9
              uuid: d869f8df-c784-c089-5fdc-7571582019b6
            - allDay: true
              attendees:
              - urn:uuid:134d8974-384b-c152-ff9b-4306c7899bf0
              - 6b28d406-c816-ec57-4af0-4e829a71e3a5
              - urn:uuid:46d7f0d9-052f-dd3a-23d5-98d4bec7b78e
              description: do in aute
              endsAt: '1952-02-20T11:03:30.515Z'
              startsAt: '1978-04-21T14:29:58.831Z'
              title: eu
              type: urn:uuid:7f888cfe-0c59-b1db-4071-e5b32a941dbb
              uuid: urn:uuid:f606a491-537f-1c3e-844e-4e25025bf67b
            - allDay: false
              attendees:
              - dee9d4ac-e217-e9b1-5b1a-5f9b7ccdc8cb
              - b91557c2-12a9-07b2-5940-263cc4f998eb
              - urn:uuid:78f80310-ec84-57dd-1259-9ca9b92eb885
              - urn:uuid:be36001b-dfd5-ced6-8030-d13bfc0306f7
              - 776f0b51-ce40-0580-6faa-89ad0886d1bb
              description: nostrud
              endsAt: '1978-08-08T08:27:20.390Z'
              startsAt: '1950-05-03T15:27:13.895Z'
              title: voluptate Lorem
              type: b3066356-2b3d-f948-5d2f-b568a414ef91
              uuid: urn:uuid:02a4cd62-5187-feb0-3de0-fefa734dae31
            - allDay: false
              attendees:
              - 18d44de1-ca9a-68e5-6a9f-bd59673ab01e
              - 7e730ae4-7de8-a62b-c53c-f3be84e9ca18
              description: dolor
              endsAt: '2012-03-01T19:12:02.235Z'
              startsAt: '1987-08-23T20:43:41.509Z'
              title: esse nisi et
              type: e9e9ebf3-0bc0-4433-2902-7a02b22a02f5
              uuid: urn:uuid:9ce88d42-ae1e-c8bb-afe8-c800fb60c930
            - allDay: true
              attendees:
              - urn:uuid:86512024-e831-7085-23fb-33f9b8ee4af7
              description: ut veniam
              endsAt: '2010-03-11T10:48:22.902Z'
              startsAt: '1982-12-04T07:22:43.320Z'
              title: ea id nisi
              type: urn:uuid:89b3081c-83c7-8c3f-c43d-7ae0dffabba9
              uuid: b7e051b3-9471-80cf-cd28-d5bbb0888664
      responses:
        '204':
          description: Successfully upserted all events
          schema: {}
        '400':
          description: Invalid request parameters, for example a required field is
            missing or in update the type missmatch the event type.
        '404':
          description: "If at least one event to update doesn\u2019t exist, the whole\
            \ upsert operation will be aborted and a 404 returned."
        '500':
          description: Internal error
      security:
      - basic: []
      summary: Bulk edit calendar events
      tags:
      - Calendar Events
  /services/{serviceId}/calendar/templates/type:
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            code:
              type: string
          type: object
      responses:
        '202':
          description: ''
          headers:
            Location:
              type: string
          schema:
            properties: {}
            type: object
      summary: Create a Event Type with Template
      tags:
      - Calendar Events
  /services/{serviceId}/channels:
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/service-channel-input'
        x-examples:
          application/json:
            channel_type_code: phone_number
            channel_value: '+18585551212'
            phone_number_carrier_code: twilio_phone_number
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Add service channel
      tags:
      - Services
  /services/{serviceId}/contact-fields:
    get:
      operationId: list-contact-fields
      parameters:
      - $ref: '#/parameters/serviceId'
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - createdAt: '1955-11-02T17:06:28.424Z'
              id: 814f8732-f50f-564b-3339-fae4abaf4bbc
              name: iru
              options:
              - dolore enim
              - occaecat sunt cupidatat dolore
              - laborum dolor ullamco exercitation
              - pariatur in
              - non aliquip Duis cupidatat
              type: string
              updatedAt: '1960-01-05T06:32:46.094Z'
            - createdAt: '1950-04-05T09:52:16.360Z'
              id: e89f4b5c-0a77-e924-cc6f-8c4685597918
              name: Lo
              type: boolean
              updatedAt: '2018-01-14T19:19:18.947Z'
          schema:
            items:
              $ref: '#/definitions/contact-field'
            type: array
      summary: List contact fields
      tags:
      - Contact Fields
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      operationId: create-contact-field
      parameters:
      - $ref: '#/parameters/serviceId'
      - in: body
        name: body
        schema:
          $ref: '#/definitions/contact-field-input'
        x-examples:
          application/json:
            name: Favorite flower
            type: string
      responses:
        '201':
          $ref: '#/responses/record-saved'
        '400':
          $ref: '#/responses/request-validation-failed'
        '403':
          $ref: '#/responses/request-validation-failed'
      summary: Create contact field
      tags:
      - Contact Fields
  /services/{serviceId}/contact-fields/{contactFieldId}:
    delete:
      operationId: delete-contact-field
      parameters:
      - $ref: '#/parameters/serviceId'
      - $ref: '#/parameters/contactFieldId'
      responses:
        '204':
          $ref: '#/responses/record-deleted'
      summary: Delete contact field
      tags:
      - Contact Fields
    get:
      operationId: get-contact-field
      parameters:
      - $ref: '#/parameters/serviceId'
      - $ref: '#/parameters/contactFieldId'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              createdAt: '2004-08-28T03:32:07.596Z'
              id: 9793cf65-c072-11fc-a19b-6bb07930bb0b
              name: Favorite flower
              type: string
              updatedAt: '2014-03-05T19:36:26.433Z'
          schema:
            $ref: '#/definitions/contact-field'
      summary: Get contact field
      tags:
      - Contact Fields
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: contactFieldId
      required: true
      type: string
    put:
      operationId: update-contact-field
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/contact-field-input'
        x-examples:
          application/json:
            name: Favorite pizza topping
            options:
            - pepperoni
            - sausage
            - onion
            type: string
      - $ref: '#/parameters/serviceId'
      - $ref: '#/parameters/contactFieldId'
      responses:
        '202':
          $ref: '#/responses/record-saved'
        '400':
          $ref: '#/responses/request-validation-failed'
        '403':
          $ref: '#/responses/request-validation-failed'
      summary: Update contact field
      tags:
      - Contact Fields
  /services/{serviceId}/contact-log:
    get:
      operationId: list-contact-import-log
      parameters:
      - format: date-time
        in: query
        name: range[start]
        required: true
        type: string
      - format: date-time
        in: query
        name: range[end]
        required: true
        type: string
      - in: query
        name: query
        type: string
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - action: ignored
              email: amet
              errors:
              - ea anim dolor exercitation dolor
              - reprehenderit
              - velit sed nostrud dolore in
              - elit
              matchedOn: phone
              name: nulla sint i
              phone: ipsum elit
              receivedAt: '1952-12-12T02:42:43.540Z'
              result: failure
              source: in cillum aute velit
          schema:
            items:
              $ref: '#/definitions/contact-log'
            type: array
      summary: Get a list of entries from the Contact Import Log
      tags:
      - Contact Import Log
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
  /services/{serviceId}/contacts/:
    delete:
      description: Delete a Contact
      operationId: delete-services-serviceId-contacts-contactUuid
      responses:
        '204':
          description: No Content
      summary: Delete Contact
      tags:
      - Contacts
      x-stoplight:
        id: sipzxl4ba6eoo
    get:
      description: Get a Contact
      operationId: get-services-serviceId-contacts-contactUuid
      parameters:
      - in: body
        name: body
        schema:
          properties:
            channels:
              items:
                properties:
                  isActive:
                    type: boolean
                  type:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            contactFields:
              items:
                properties:
                  contactFieldName:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            externalId:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            notes:
              type: string
            tags:
              items:
                type: string
              type: array
            title:
              type: string
          type: object
          x-examples:
            Example 1:
              channels:
              - isActive: true
                type: email_address
                value: john.doe@example.com
              - isActive: false
                type: phone_number
                value: '+1234567890'
              contactFields:
              - contactFieldName: Custom Field 1
                value: Value 1
              - contactFieldName: Custom Field 2
                value: Value 2
              externalId: '12345'
              firstName: John
              lastName: Doe
              notes: This is a sample contact.
              tags:
              - Tag1
              - Tag2
              - Tag3
              title: Manager
      responses:
        '200':
          description: OK
      summary: Get Contact
      tags:
      - Contacts
      x-stoplight:
        id: kf92nrxkzee82
    parameters:
    - description: Service Id
      in: path
      name: serviceId
      required: true
      type: string
    patch:
      description: Update a Contact
      operationId: patch-services-serviceId-contacts-contactUuid
      parameters:
      - description: ''
        in: body
        name: body
        schema:
          properties:
            channels:
              items:
                properties:
                  isActive:
                    type: boolean
                  type:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            contactFields:
              items:
                properties:
                  contactFieldName:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            externalId:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            notes:
              type: string
            tags:
              items:
                type: string
              type: array
            title:
              type: string
          type: object
          x-examples:
            Example 1:
              avatar:
                content: base64-encoded-image-data
                filename: avatar.jpg
                mimeType: image/jpeg
              channels:
              - isActive: true
                type: email_address
                value: john.doe@example.com
              - isActive: false
                type: phone_number
                value: '+1234567890'
              contactFields:
              - contactFieldName: Custom Field 1
                value: Value 1
              - contactFieldName: Custom Field 2
                value: Value 2
              conversationProperties:
                assignedToTeamId: team_uuid
                assignedToUserId: user_uuid
                isClosed: false
                isUnread: true
              externalId: '12345'
              firstName: John
              lastName: Doe
              notes: This is a sample contact.
              tags:
              - Tag1
              - Tag2
              - Tag3
              title: Manager
      responses:
        '200':
          description: OK
      summary: Update Contact
      tags:
      - Contacts
      x-internal: false
      x-stoplight:
        id: 0mwk85bsuny22
    post:
      description: Create a Contact.
      operationId: post-services-serviceId-contacts-contactUuid
      parameters:
      - in: body
        name: body
        schema:
          properties:
            channels:
              items:
                properties:
                  isActive:
                    type: boolean
                  type:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            contactFields:
              items:
                properties:
                  contactFieldName:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            externalId:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            notes:
              type: string
            tags:
              items:
                type: string
              type: array
            title:
              type: string
          type: object
          x-examples:
            Example 1:
              avatar:
                content: base64-encoded-image-data
                filename: avatar.jpg
                mimeType: image/jpeg
              channels:
              - isActive: true
                type: email_address
                value: john.doe@example.com
              - isActive: false
                type: phone_number
                value: '+1234567890'
              contactFields:
              - contactFieldName: Custom Field 1
                value: Value 1
              - contactFieldName: Custom Field 2
                value: Value 2
              conversationProperties:
                assignedToTeamId: team_uuid
                assignedToUserId: user_uuid
                isClosed: false
                isUnread: true
              externalId: '12345'
              firstName: John
              lastName: Doe
              notes: This is a sample contact.
              tags:
              - Tag1
              - Tag2
              - Tag3
              title: Manager
      responses:
        '200':
          description: OK
      summary: Create Contact
      tags:
      - Contacts
      x-internal: false
      x-stoplight:
        id: c12lq1zwb2mes
    put:
      description: Set Contact values. Any data not set will be removed.
      operationId: put-services-serviceId-contacts-contactUuid
      parameters:
      - in: body
        name: body
        schema:
          properties:
            channels:
              items:
                properties:
                  isActive:
                    type: boolean
                  type:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            contactFields:
              items:
                properties:
                  contactFieldName:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            externalId:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            notes:
              type: string
            tags:
              items:
                type: string
              type: array
            title:
              type: string
          type: object
          x-examples:
            Example 1:
              channels:
              - isActive: true
                type: email_address
                value: john.doe@example.com
              - isActive: false
                type: phone_number
                value: '+1234567890'
              contactFields:
              - contactFieldName: Custom Field 1
                value: Value 1
              - contactFieldName: Custom Field 2
                value: Value 2
              externalId: '12345'
              firstName: John
              lastName: Doe
              notes: This is a sample contact.
              tags:
              - Tag1
              - Tag2
              - Tag3
              title: Manager
      responses:
        '200':
          description: OK
      summary: Set Contact
      tags:
      - Contacts
      x-internal: true
      x-stoplight:
        id: r419ycc42w19s
  /services/{serviceId}/contacts/{contactUuid}:
    parameters:
    - description: Service Id
      in: path
      name: serviceId
      required: true
      type: string
    - description: Contact Uuid
      in: path
      name: contactUuid
      required: true
      type: string
    patch:
      operationId: patch-services-serviceId-contacts-contactUuid
      parameters:
      - in: body
        name: body
        schema:
          properties:
            channels:
              items:
                properties:
                  isActive:
                    type: boolean
                  type:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            contactFields:
              items:
                properties:
                  contactFieldName:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            externalId:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            notes:
              type: string
            tags:
              items:
                type: string
              type: array
            title:
              type: string
          type: object
          x-examples:
            Example 1:
              avatar:
                content: base64-encoded-image-data
                filename: avatar.jpg
                mimeType: image/jpeg
              channels:
              - isActive: true
                type: Email
                value: john.doe@example.com
              - isActive: false
                type: Phone
                value: '+1234567890'
              contactFields:
              - contactFieldName: Custom Field 1
                value: Value 1
              - contactFieldName: Custom Field 2
                value: Value 2
              conversationProperties:
                assignedToTeamId: team_uuid
                assignedToUserId: user_uuid
                isClosed: false
                isUnread: true
              externalId: '12345'
              firstName: John
              lastName: Doe
              notes: This is a sample contact.
              tags:
              - Tag1
              - Tag2
              - Tag3
              title: Manager
      responses:
        '200':
          description: OK
      summary: Update Contact
      tags:
      - Contacts
      x-stoplight:
        id: 4v0h5vol52p27
    post:
      operationId: create-contact-field
      parameters:
      - $ref: '#/parameters/serviceId'
      - in: body
        name: body
        schema:
          properties:
            avatar:
              properties:
                content:
                  type: string
                filename:
                  type: string
                mimeType:
                  type: string
              type: object
            channels:
              items:
                properties:
                  isActive:
                    type: boolean
                  type:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            contactFields:
              items:
                properties:
                  contactFieldName:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            conversationProperties:
              properties:
                assignedToTeamId:
                  type: string
                assignedToUserId:
                  type: string
                isClosed:
                  type: boolean
                isUnread:
                  type: boolean
              type: object
            externalId:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            notes:
              type: string
            tags:
              items:
                type: string
              type: array
            title:
              type: string
          type: object
          x-examples:
            Example 1:
              avatar:
                content: base64-encoded-image-data
                filename: avatar.jpg
                mimeType: image/jpeg
              channels:
              - isActive: true
                type: Email
                value: john.doe@example.com
              - isActive: false
                type: Phone
                value: '+1234567890'
              contactFields:
              - contactFieldName: Custom Field 1
                value: Value 1
              - contactFieldName: Custom Field 2
                value: Value 2
              conversationProperties:
                assignedToTeamId: team_uuid
                assignedToUserId: user_uuid
                isClosed: false
                isUnread: true
              externalId: '12345'
              firstName: John
              lastName: Doe
              notes: This is a sample contact.
              tags:
              - Tag1
              - Tag2
              - Tag3
              title: Manager
        x-examples:
          application/json:
            name: Favorite flower
            type: string
      responses:
        '201':
          $ref: '#/responses/record-saved'
        '400':
          $ref: '#/responses/request-validation-failed'
        '403':
          $ref: '#/responses/request-validation-failed'
      summary: Create Contact
      tags:
      - Contacts
      x-internal: true
      x-stoplight:
        id: j1sixoxl5qxmt
    put:
      operationId: put-services-serviceId-contacts-contactUuid
      parameters:
      - in: body
        name: body
        schema:
          properties:
            channels:
              items:
                properties:
                  isActive:
                    type: boolean
                  type:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            contactFields:
              items:
                properties:
                  contactFieldName:
                    type: string
                  value:
                    type: string
                type: object
              type: array
            externalId:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            notes:
              type: string
            tags:
              items:
                type: string
              type: array
            title:
              type: string
          type: object
          x-examples:
            Example 1:
              avatar:
                content: base64-encoded-image-data
                filename: avatar.jpg
                mimeType: image/jpeg
              channels:
              - isActive: true
                type: Email
                value: john.doe@example.com
              - isActive: false
                type: Phone
                value: '+1234567890'
              contactFields:
              - contactFieldName: Custom Field 1
                value: Value 1
              - contactFieldName: Custom Field 2
                value: Value 2
              conversationProperties:
                assignedToTeamId: team_uuid
                assignedToUserId: user_uuid
                isClosed: false
                isUnread: true
              externalId: '12345'
              firstName: John
              lastName: Doe
              notes: This is a sample contact.
              tags:
              - Tag1
              - Tag2
              - Tag3
              title: Manager
      responses:
        '200':
          description: OK
      summary: Replace Contact
      tags:
      - Contacts
      x-stoplight:
        id: k5c4bw3irpjnh
  /services/{serviceId}/csv-import/process:
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            beginAtRow:
              type: integer
            headerMap:
              items: {}
              type: array
          type: object
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Process last updated CSV
      tags:
      - CSV Import
  /services/{serviceId}/events:
    get:
      parameters:
      - $ref: '#/parameters/serviceId'
      - format: date-time
        in: query
        name: start
        type: string
      - format: date-time
        in: query
        name: end
        type: string
      - in: query
        name: group_by_contact
        type: boolean
      responses:
        '200':
          description: ''
          examples:
            application/json:
              _links:
                next: https://api.zingle.me/v2/organizations/c787d4f4-867f-4b2f-8c18-828b87f42466/events?page=2
                self: https://api.zingle.me/v2/organizations/c787d4f4-867f-4b2f-8c18-828b87f42466/events?page=1
              currentPage: 1
              items:
              - body: 'We need help here! '
                contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T15:05:03+0000
                id: 5b46b798-4b52-4bc7-aef9-2773476c5f3a
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - body: 'We need help here! '
                contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T15:06:20+0000
                id: f46aeebb-f19c-486f-bfd1-704f4a8cb348
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - body: 'We need help here! '
                contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T15:09:29+0000
                id: 1f9c6447-684c-46c0-a277-5a72ad4c5f8b
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - body: 'We need help here! '
                contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T15:16:36+0000
                id: 7bc72425-b58e-4536-8f6b-53d84e7f1bc1
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - body: We need help here! tiger
                contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T15:24:09+0000
                id: 85373292-b18c-48ac-8f74-025ca12c6316
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T21:08:42+0000
                id: df3f374c-51ed-4456-80d5-fb71727b4cef
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: workflow_started
                workflow:
                  id: 3
                  name: notes
              - contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T21:08:43+0000
                id: 81557a55-5b96-40c4-977c-90c9935224e4
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                workflow:
                  id: 3
                  name: notes
              - contactId: 458e7cac-04d0-4751-aea3-14fe813645cd
                createdAt: 2020-09-01T21:09:32+0000
                id: 747fe98d-441d-4a1c-b4d2-9d2de5115fac
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: workflow_ended
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: 3
                  name: notes
              - contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:09:37+0000
                id: 9a5c4fc0-caa7-49f6-bec6-8a05f7d32f5f
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: mark_confirmed
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: null
                  name: null
              - contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:09:47+0000
                id: e00c3b9a-d756-4636-b428-cc498dd8bfc3
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: workflow_started
                workflow:
                  id: 3
                  name: notes
              - contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:09:48+0000
                id: 17e93112-c264-421f-8df9-f0f0b32a4897
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                workflow:
                  id: 3
                  name: notes
              - contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:21:17+0000
                id: a687c882-65c5-4272-bdd7-1dff5fcbc672
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: workflow_ended
                user:
                  avatarUrl: https://cdn.zingle.me/4fe/58/e2/75/94763fe460a6e621ef26097416e7dee.jpeg
                  createdAt: 2020-07-31T12:30:35+0000
                  email: user@zingle.me
                  emailValidated: true
                  firstName: John
                  hotsosLogin: null
                  id: 1
                  lastName: Doe
                  phone: null
                  privileges: []
                  signature: null
                  teams:
                  - 4960afc0-e20a-4a85-b700-4c528f9e702e
                  title: null
                  updatedAt: 2020-10-09T13:10:17+0000
                  username: user@zingle.me
                  uuid: 6b7a220e-ef28-405a-b2eb-7a9ba64a022e
                workflow:
                  id: 3
                  name: notes
              - contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:21:31+0000
                id: 889ce18b-57a2-40db-8eea-9aff90470569
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: workflow_started
                workflow:
                  id: 3
                  name: notes
              - body: hello John Doe
                contactId: 0b5b15d0-9458-4dd2-8ad2-aa0eb7229a4e
                createdAt: 2020-09-01T21:21:34+0000
                id: 71982dc8-9c20-41f4-a66e-0333fe9e39fe
                serviceId: 3091f4ec-4d6b-4834-8d20-dd23a13e75ca
                type: note
                workflow:
                  id: 3
                  name: notes
              lastPage: 10
              perPage: 50
              total: 454
          schema:
            properties: {}
            type: object
      security:
      - jwt: []
      summary: Return events by service
      tags:
      - Services
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
  /services/{serviceId}/features/{featureCode}:
    delete:
      operationId: remove-feature
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Remove feature from service
      tags:
      - Services
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: featureCode
      required: true
      type: string
    post:
      operationId: add-feature
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Add feature to service
      tags:
      - Services
  /services/{serviceId}/feeds/{feedId}/notes:
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: feedId
      required: true
      type: string
    post:
      description: "Add an internal note to a Feed. Mentions can be added with the\
        \ following tags:\n- If you want to mention a User: {u@xxx-xxx-xxx} \n- If\
        \ you want to mention a whole Team: {t@xxx-xxx-xxx}\n\nWhere the \"xxx-xxx-xxx\"\
        \ is the user or team's UUID.\n\nFor example:\n```\n{\n  \"body\": \"We need\
        \ help here! {u@646349de-3d3f-4895-9eec-c3c85b9b16f5} {t@85c0a712-c618-46f8-b1e3-a20bdc0feeb3}\"\
        \n}\n```"
      parameters:
      - $ref: '#/parameters/serviceId'
      - $ref: '#/parameters/feedId'
      - in: body
        name: body
        schema:
          properties:
            body:
              type: string
          type: object
        x-examples:
          application/json:
            body: We need help here! {u@646349de-3d3f-4895-9eec-c3c85b9b16f5} {t@85c0a712-c618-46f8-b1e3-a20bdc0feeb3}
      responses:
        '204':
          $ref: '#/responses/record-accepted'
      summary: Add an internal note to a Feed
      tags:
      - Feeds
  /services/{serviceId}/hotsos/test-reservations:
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      consumes:
      - application/json
      operationId: hotsos-contact-test
      produces:
      - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - Arrival: '2020-07-29T10:40:29-07:00'
              Country: US
              Departure: '2020-08-08T10:40:29-07:00'
              Email: edyth.gleason@example.com
              ExtendedAttributes:
                ExtendedAttribute:
                - Name: HOME
                  Value:
                    '#text': (203) 555-3396
                    '@xsi:type': xsd:string
                - Name: MOBILE
                  Value:
                    '#text': (517) 555-3678
                    '@xsi:type': xsd:string
              FirstName: Alexander
              Group:
                ID: '8454545'
              ID: '902914'
              LastName: Parker
              Phone: (332) 555-4998
              ProfileID: '647999'
              RoomNumber: '4333'
              Salutation: Mr.
              SortValue: '2020-08-20T10:40:29-07:00'
              SpecialRequests: NEWSPAPER
              Status: CHECKED_IN
              VIP: 'null'
          schema:
            items:
              properties:
                Arrival:
                  format: date-time
                  type: string
                Country:
                  type: string
                Departure:
                  format: date-time
                  type: string
                Email:
                  format: email
                  type: string
                ExtendedAttributes:
                  properties:
                    ExtendedAttribute:
                      properties:
                        Name:
                          enum:
                          - HOME
                          - MOBILE
                          - BUSINESS
                          type: string
                        Value:
                          properties:
                            '#text':
                              description: Phone Number
                              example: '+14065551212'
                              type: string
                          type: object
                      type: object
                  type: object
                FirstName:
                  type: string
                Group:
                  properties:
                    ID:
                      type: string
                  type: object
                LastName:
                  type: string
                Phone:
                  type: string
                ProfileID:
                  type: string
                RoomNumber:
                  type: string
                Salutation:
                  type: string
                SortValue:
                  format: date-time
                  type: string
                SpecialRequests:
                  type: string
                Status:
                  enum:
                  - CHECKED_IN
                  - CANCELLED
                  - CHECKED_OUT
                  - RESERVED
                  type: string
                VIP:
                  type: boolean
              required:
              - ProfileID
              - Status
              - SortValue
              type: object
            type: array
      summary: Test HotSOS contact integration
      tags:
      - HotSOS
      x-private: true
  /services/{serviceId}/integrations:
    get:
      operationId: get-integration
      parameters:
      - in: body
        name: body
        schema:
          items:
            $ref: '#/definitions/integration'
          type: array
        x-examples:
          application/json:
          - auth_token: ipsum nisi
            code: dolore consectetu
            configuration:
            - code: aliquip et Excepteur
              field_type: non sint sunt
              name: et ex consectetur tempor
              value: ullamco adipisicing eu m
            - code: nulla culpa
              field_type: eu
              name: aliqua veniam officia aute ad
              value: cillum dolore magna
            - code: sit in
              field_type: dolore
              name: ad
              value: id
            - code: in deserunt
              field_type: laboris Lorem esse quis deserunt
              name: dolore ame
              value: consectetur in
            - code: esse incididunt in
              field_type: culpa magna
              name: officia cupidatat
              value: cupidatat
            mapping_configuration:
              begin_at_row: 92521440.35822311
              last_received_at: '1995-01-21T09:10:12.425Z'
              mapping_configuration: {}
              sample_data:
                headers:
                - occaecat sint
                - fugiat veniam qui laborum
                - irure et
                rows:
                - {}
                - {}
                - {}
              status: awaiting_configuration
            name: deserunt Duis eiusmod Except
            requires_auth_token: veniam
            status: quis in sunt
          - auth_token: nulla Ut
            code: laborum
            configuration:
            - code: esse deserunt
              field_type: laboris ut mollit
              name: enim exercitation minim elit
              value: elit ipsum amet
            - code: ad
              field_type: anim
              name: culpa cillum con
              value: do aliquip tempor anim
            - code: cupidatat
              field_type: ut
              name: ut ad repr
              value: nisi tempor
            - code: officia culpa Lorem sed laborum
              field_type: labore anim et consequat
              name: reprehenderit magna Duis voluptate in
              value: Ut non nisi sed
            - code: et
              field_type: aliqua
              name: qui in
              value: in Lorem dolor magna
            mapping_configuration:
              begin_at_row: 76108369.96022585
              last_received_at: '1953-06-29T01:20:52.409Z'
              mapping_configuration: {}
              sample_data:
                headers:
                - Duis sint
                - Duis ea
                - anim
                - tempor
                rows:
                - {}
                - {}
              status: awaiting_configuration
            name: aliquip culpa eu laboris
            requires_auth_token: ipsum fugiat
            status: laboris magna quis dolor
      produces:
      - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - code: springer
              name: Springer
              status: connected
            - code: opera
              name: Opera
              status: connected
            - code: zapier
              name: Zapier
              status: connected
            - code: hotsos
              name: HotSOS
              status: connected
            - code: bitly
              name: Bitly
              status: connected
            - code: email
              name: Email
              status: needs_attention
            - code: sftp
              name: SFTP
              status: needs_attention
            - code: mindbody
              name: MindBody
              status: disconnected
            - code: tripadvisor
              name: TripAdvisor
              status: connected
          schema:
            items:
              properties:
                code:
                  type: string
                name:
                  type: string
                status:
                  type: string
              type: object
            type: array
      summary: Get a list of all integrations for a service
      tags:
      - Integrations
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
  /services/{serviceId}/integrations/mindbody/activation-link:
    get:
      consumes:
      - application/json
      operationId: get-mindbody-activation-link
      produces:
      - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json:
              link: https://mindbodyonline.com/foo/bar
          schema:
            properties:
              link:
                type: string
            type: object
      summary: Generate an activation link for MindBody
      tags:
      - Integrations
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
  /services/{serviceId}/integrations/{integration}:
    delete:
      description: Disables an integration, deletes all integration config values,
        removes an integration-related auth tokens
      operationId: disable-integration
      responses:
        '204':
          description: ''
          examples:
            application/json: {}
          schema:
            properties: {}
            type: object
      summary: Disable an integration
      tags:
      - Integrations
    get:
      operationId: get-integration
      responses:
        '200':
          description: ''
          examples:
            application/json:
              code: springer
              configuration:
                password:
                  code: password
                  field_type: password
                  name: Password
                  value: oacazoahospiacha
                username:
                  code: username
                  field_type: username
                  name: Username
                  value: import_5c42dfdd992e4_1
              field_mapping:
                begin_at_row: 1
                column_field_mapping: null
                last_received_at: null
                sample_data: null
                status: awaiting_receipt
              name: Springer
              status: connected
          schema:
            $ref: '#/definitions/integration'
      summary: Get a single integration
      tags:
      - Integrations
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: integration
      required: true
      type: string
    post:
      operationId: enable-integration
      parameters:
      - in: body
        name: body
        schema:
          properties:
            auth_token:
              type: string
          type: object
        x-examples:
          application/json:
            auth_token: as0d9as09d8as908d
      produces:
      - application/json
      responses:
        '204':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Enable an integration for a service
      tags:
      - Integrations
    put:
      parameters:
      - in: body
        name: body
        schema:
          items:
            properties:
              configuration:
                properties:
                  ? ''
                  : type: object
                type: object
            type: object
          type: array
        x-examples:
          application/json:
            configuration:
              hotsos_checkin_message:
                value: welcome222!
              hotsos_checkout_message:
                value: null
              hotsos_fetch_enabled:
                value: false
              hotsos_order_update_enabled:
                value: false
              hotsos_password:
                value: 2905ZINGLE
              hotsos_room_sync_enabled:
                value: false
              hotsos_url:
                value: ifc.na3.hot-sos.net
              hotsos_username:
                value: ZINGLE_290511
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Update an integration
      tags:
      - Integrations
  /services/{serviceId}/integrations/{integration}/field-mapping:
    delete:
      operationId: delete-field-mapping
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Delete a field mapping for an integration
      tags:
      - Integrations
    get:
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/integration-field-mapping'
        x-examples:
          application/json:
            begin_at_row: -65064498.88114685
            last_received_at: '1959-04-02T20:49:53.419Z'
            mapping_configuration: {}
            sample_data:
              headers:
              - in et Excepteur
              - consequat do aliquip nisi dolor
              rows:
              - {}
              - {}
              - {}
              - {}
            status: awaiting_configuration
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Get the field mapping for an integration
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: integration
      required: true
      type: string
    put:
      operationId: update-field-mapping
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/integration-field-mapping-input'
        x-examples:
          application/json:
            begin_at_row: -41600436.55765091
            column_field_mapping: {}
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Create or update a field mapping for an integration
      tags:
      - Integrations
  /services/{serviceId}/message-categories:
    get:
      operationId: list-message-categories
      responses:
        '200':
          description: ''
          examples:
            application/json: []
          schema:
            items:
              allOf:
              - $ref: '#/definitions/message-category'
            type: array
      summary: List Message Categories
      tags:
      - Message Categories
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      operationId: create-message-category
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/message-category-input'
        x-examples:
          application/json:
            name: anim con
      responses:
        '201':
          $ref: '#/responses/record-saved'
      summary: Create Message Category
      tags:
      - Message Categories
  /services/{serviceId}/message-categories/{messageCategoryId}:
    delete:
      operationId: delete-message-category
      responses:
        '204':
          $ref: '#/responses/record-deleted'
      summary: Delete Message Category
      tags:
      - Message Categories
    get:
      operationId: get-message-category
      responses:
        '200':
          description: ''
          examples:
            application/json:
              createdAt: '2014-04-02T19:56:46.008Z'
              id: 6075706b-46ca-98d7-104f-e978d009d133
              name: culpa
              updatedAt: '1964-02-07T14:01:54.035Z'
          schema:
            $ref: '#/definitions/message-category'
      summary: Get Message Category
      tags:
      - Message Categories
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: messageCategoryId
      required: true
      type: string
    put:
      operationId: update-message-category
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/message-category-input'
        x-examples:
          application/json:
            name: volupta
      responses:
        '202':
          $ref: '#/responses/record-saved'
      summary: Update Message Category
      tags:
      - Message Categories
  /services/{serviceId}/messages:
    parameters: []
    post:
      description: Sends a message to one or more recipients.  Recipients may be specified
        using a specific channel value (like a phone number) or using a set of conditions
        (in which case all contacts matching the conditions will receive the message
        on their active channel.
      operationId: send-message
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/message-input'
        x-examples:
          application/json:
            attachments:
            - content: ea proident pariatur sit
              filename: '[w2,gE[&\A.GO(I~T5yG7h'
              mimeType: LPyIL5FCyf/b
            - content: ex in
              filename: ' u8..K3$1j'
              mimeType: nNv2xxReQMf/Bf4oeBNXoG
            - content: sit Ut enim
              filename: t0)LI@.y^[Bdds2m5
              mimeType: X/Q1t38TQ0jcz
            - content: ea veni
              filename: 6.W3t,RBYdc
              mimeType: Cp2GvVU4rx/Ff1NT
            - content: deserunt Lorem q
              filename: Hn\$.9ix)
              mimeType: a0g/JX
            body: mollit adipisicing Excepteur
            deduplicationId: exercitation nulla
            delaySeconds: 54830577.09783256
            destinationLanguage: deserunt
            recipients:
            - conditions: eu ea officia elit
              type: conditions
            - phoneNumber: dolore fugiat veniam eiusmod et
              type: phone
            sourceLanguage: cillum consectetur ut
            templateId: dolor laborum est
      responses:
        '202':
          $ref: '#/responses/record-accepted'
      security: []
      summary: Send a message
      tags:
      - Messages
  /services/{serviceId}/messages/{messageId}:
    delete:
      operationId: delete-message
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      tags:
      - Messages
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: messageId
      required: true
      type: string
  /services/{serviceId}/messages/{messageId}/categories:
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: messageId
      required: true
      type: string
    put:
      operationId: set-message-categories
      parameters:
      - in: body
        name: body
        schema:
          description: 'Array of category names to set on the message.  All other
            categories will be '
          items:
            type: string
          type: array
        x-examples:
          application/json:
          - Housekeeping
          - VIP
          - Revenue
      responses:
        '202':
          $ref: '#/responses/record-saved'
      summary: Set message categories
      tags:
      - Messages
  /services/{serviceId}/messages/{messageId}/categories/{messageCategoryId}:
    delete:
      operationId: remove-message-category
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Remove message category
      tags:
      - Messages
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: messageId
      required: true
      type: string
    - in: path
      name: messageCategoryId
      required: true
      type: string
    post:
      operationId: apply-message-category
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Apply message category
      tags:
      - Messages
  /services/{serviceId}/reports/status:
    get:
      operationId: message-delivery-statuses
      parameters:
      - format: date-time
        in: query
        name: range[start]
        required: true
        type: string
      - format: date-time
        in: query
        name: range[end]
        required: true
        type: string
      - in: query
        name: size
        type: number
      - in: query
        name: page
        type: number
      - enum:
        - asc
        - desc
        in: query
        name: sortDirection
        type: string
      - default: createdAt
        in: query
        name: sortBy
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: search
        type: string
      responses:
        '200':
          description: ''
          schema:
            properties:
              _links:
                properties:
                  self:
                    type: string
                type: object
              currentPage:
                type: integer
              items:
                items:
                  properties:
                    body:
                      type: string
                    contact:
                      properties:
                        firstName:
                          type:
                          - string
                          - 'null'
                        fullName:
                          type:
                          - string
                          - 'null'
                        id:
                          type: string
                        lastName:
                          type:
                          - string
                          - 'null'
                        title:
                          type:
                          - 'null'
                          - string
                      type: object
                    contactChannel:
                      properties:
                        formattedValue:
                          type: string
                        type:
                          type: string
                        value:
                          type: string
                      type: object
                    duration:
                      type: integer
                    hasAttachment:
                      type: boolean
                    id:
                      type: integer
                    sentAt:
                      format: date-time
                      type: string
                    sentBy:
                      properties:
                        avatarUrl:
                          type:
                          - string
                          - 'null'
                        createdAt:
                          format: date-time
                          type: string
                        email:
                          type:
                          - string
                          - 'null'
                        emailValidated:
                          type: boolean
                        firstName:
                          type:
                          - string
                          - 'null'
                        hotsosLogin:
                          type:
                          - 'null'
                          - string
                        id:
                          type: integer
                        lastName:
                          type:
                          - string
                          - 'null'
                        phone:
                          type:
                          - 'null'
                          - string
                        privileges:
                          items:
                            type: object
                          type: array
                        signature:
                          type:
                          - 'null'
                          - string
                        teams:
                          items:
                            type: object
                          type: array
                        title:
                          type:
                          - 'null'
                          - string
                        updatedAt:
                          format: date-time
                          type: string
                        username:
                          type: string
                        uuid:
                          type: string
                      type: object
                    source:
                      type: string
                    status:
                      properties:
                        description:
                          type: string
                        type:
                          type: string
                      type: object
                  type: object
                type: array
              lastPage:
                type: integer
              perPage:
                type: integer
              total:
                type: integer
            type: object
      summary: Message delivery statuses
      tags:
      - Delivery Status
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
  /services/{serviceId}/segments:
    get:
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - backgroundColor: dolor magna
              conditions:
              - method: commodo irure et cillum
                source: velit consectetur dolor
                value: esse ad
              - method: et cupida
                source: id dolor elit
                value: qui magna
              - method: nulla sed
                source: sit dolore cupidatat reprehenderit veniam
                value: quis ut
              - method: reprehenderit ut do
                source: enim sint nulla cupidata
                value: nostrud
              - method: velit id
                source: nisi occaecat officia ullamco
                value: Lorem sunt officia
              createdAt: '2018-01-17T13:22:22.898Z'
              id: 3ad0a1bb-f54c-235e-49a0-efd36c177a0b
              name: eu sint e
              textColor: in occaecat Lorem tempor anim
              updatedAt: '1984-03-15T02:01:20.855Z'
            - backgroundColor: deserunt
              conditions:
              - method: culpa
                source: proident
                value: cupidatat deserunt laborum
              - method: ullamco laborum in enim
                source: sint tempor non pariatur
                value: aute labore
              - method: minim aliqua
                source: occaecat est Excepteur
                value: et laboris sit cupidatat
              - method: id culpa velit
                source: ex id mollit non
                value: est pariatur exercitation magna
              createdAt: '1953-06-02T21:21:31.790Z'
              id: 0fcc2a5d-1f9b-9689-e8f3-81a95aa237e6
              name: Lorem
              textColor: esse occaecat Ut velit
              updatedAt: '1951-10-16T05:20:35.340Z'
            - backgroundColor: adipisicing Lorem es
              conditions:
              - method: quis culpa labore eu
                source: ut cillum
                value: in nisi adipisicing ut
              - method: ad sunt
                source: minim ex nostrud in
                value: incididunt nostrud deserunt dolore non
              - method: eiusmod fugiat
                source: aliqui
                value: Duis et deserunt
              - method: do nisi
                source: in
                value: dolore aute deserunt
              - method: sit
                source: id minim dolor
                value: sed proident
              createdAt: '2009-04-16T06:25:35.712Z'
              id: 5aa727ea-bcfe-5ad4-9425-a344788eb97c
              name: repreh
              textColor: pariatur sed amet in
              updatedAt: '1987-09-18T15:31:29.347Z'
          schema:
            items:
              $ref: '#/definitions/segment'
            type: array
      summary: List Segments
      tags:
      - Segments
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/segment-input'
        x-examples:
          application/json:
            backgroundColor: aliqua ullamco id ut
            conditions:
            - method: culp
              source: incididunt in labore
              value: reprehenderit velit
            - method: non
              source: est consectetur ipsum sed
              value: dolore veniam
            - method: velit eiusmod consequat
              source: ut non dolore
              value: quis
            name: ut
            textColor: labore Lorem quis
      responses:
        '200':
          $ref: '#/responses/record-saved'
      summary: Create Segment
      tags:
      - Segments
  /services/{serviceId}/segments/{segmentId}:
    delete:
      responses:
        '204':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Delete Segment
    get:
      operationId: get-segment
      responses:
        '200':
          description: ''
          examples:
            application/json:
              backgroundColor: commodo et ipsum dolore
              conditions:
              - comparisonMethod: proident non et in
                comparisonSource: adipisicing
                comparisonValue: nostrud esse irure proident sint
              - comparisonMethod: qui aliquip aute
                comparisonSource: sint non deserunt
                comparisonValue: adipisicing reprehenderit aliqua occaecat
              - comparisonMethod: sit nostrud
                comparisonSource: aliqua esse
                comparisonValue: id pariatur
              - comparisonMethod: voluptate commodo culpa aliqua sunt
                comparisonSource: in ex veniam Duis
                comparisonValue: reprehenderit
              createdAt: '1984-08-15T07:54:21.811Z'
              id: 7b0719ab-b942-6c7d-6607-409461bb59b6
              name: ulla
              textColor: consequat deserunt
              updatedAt: '2012-03-04T08:03:02.733Z'
          schema:
            $ref: '#/definitions/segment'
      summary: Get Segment
      tags:
      - Segments
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: segmentId
      required: true
      type: string
    put:
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/segment-input'
        x-examples:
          application/json:
            backgroundColor: ad minim dolor
            conditions:
            - comparisonMethod: irure Lorem est
              comparisonSource: proident id fugiat
              comparisonValue: ut amet
            name: ut
            textColor: fugiat qui dolore
      responses:
        '200':
          $ref: '#/responses/record-saved'
      summary: Update Segment
      tags:
      - Segments
  /services/{serviceId}/service_code:
    delete:
      parameters:
      - in: path
        name: serviceId
        required: true
        type: string
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
        '404':
          description: ''
      security:
      - bearer: []
      summary: Remove service code from a service
      tags:
      - Services
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      parameters:
      - in: path
        name: serviceId
        required: true
        type: string
      - in: header
        name: service_code
        type: string
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
        '404':
          description: ''
      security:
      - bearer: []
      summary: Add/Update service code to service
      tags:
      - Services
  /services/{serviceId}/surveys:
    get:
      description: Get list of Survey Zings for the service. Zing is count as survey
        if it has at least one survey question step.
      operationId: ListSurveyZings
      responses:
        '200':
          description: ''
          examples:
            application/json: {}
          schema:
            items:
              properties:
                displayName:
                  description: Workflow name
                  type: string
                id:
                  description: Workflow UUID
                  example: 00000000-0000-0000-0000-000000000000
                  format: uuid
                  maxLength: 36
                  minLength: 36
                  type: string
                steps:
                  items:
                    properties:
                      customMessage:
                        type:
                        - 'null'
                        - string
                      id:
                        description: Workflow Step UUID. Will be used as `externalId`
                          for question fields mapping in MEC
                        example: 00000000-0000-0000-0000-000000000000
                        type: string
                      question:
                        type: string
                      responseType:
                        enum:
                        - boolean
                        - csat
                        - nps
                        - number
                        - text
                        type: string
                    required:
                    - id
                    - customMessage
                    - question
                    - responseType
                    type: object
                  type: array
              required:
              - id
              - displayName
              type: object
            type: array
      summary: List Survey Zings
      tags:
      - Surveys
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
  /services/{serviceId}/tags:
    get:
      operationId: list-tags
      parameters: []
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - backgroundColor: '#AFD6B8'
              createdAt: '1968-07-27T19:51:00.026Z'
              id: 814f8732-f50f-564b-3339-fae4abaf4bbc
              name: exanim vel
              textColor: '#AFD6B8'
              updatedAt: '1985-08-29T15:01:12.503Z'
            - backgroundColor: '#AFD6B8'
              createdAt: '1942-02-13T11:49:56.528Z'
              id: 12345678-f50f-564b-3339-fae4abaf4bbc
              name: et nostrud
              textColor: '#AFD6B8'
              updatedAt: '1942-11-16T16:21:02.881Z'
          schema:
            items:
              $ref: '#/definitions/tag'
            type: array
      summary: List Tags
      tags:
      - Tags
    parameters:
    - $ref: '#/parameters/serviceId'
    post:
      operationId: create-tag
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/tag-input'
        x-examples:
          application/json:
            backgroundColor: '#000000'
            name: elit labor
            textColor: '#ffffff'
      responses:
        '201':
          $ref: '#/responses/record-saved'
      summary: Create Tag
      tags:
      - Tags
  /services/{serviceId}/tags/{tagId}:
    delete:
      operationId: delete-tag
      parameters:
      - $ref: '#/parameters/tagId'
      responses:
        '200':
          $ref: '#/responses/record-deleted'
      summary: Delete Tag
      tags:
      - Tags
    get:
      operationId: get-tag
      responses:
        '200':
          description: Get a contact tag
          examples:
            application/json:
            - backgroundColor: '#AFD6B8'
              createdAt: '1975-12-08T06:06:36.971Z'
              id: 838c891d-f1a3-49b0-9365-ce735b43f599
              name: 'cupidatat '
              textColor: '#AFD6B8'
              updatedAt: '1973-11-20T17:27:46.011Z'
            - backgroundColor: '#AFD6B8'
              createdAt: '2002-12-30T18:35:40.010Z'
              id: 8732162c-baec-48ff-b323-0d718219d4f1
              name: 'dosunt Ut '
              textColor: '#AFD6B8'
              updatedAt: '1983-10-05T11:09:11.602Z'
          schema:
            items:
              $ref: '#/definitions/tag'
            type: array
      summary: Get Tag
      tags:
      - Tags
    parameters:
    - description: The Service ID.
      in: path
      name: serviceId
      required: true
      type: string
    - description: The Tag ID.
      in: path
      name: tagId
      required: true
      type: string
    put:
      operationId: update-tag
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/tag-input'
        x-examples:
          application/json:
            backgroundColor: '#000000'
            name: qui proide
            textColor: '#ffffff'
      - $ref: '#/parameters/tagId'
      responses:
        '202':
          $ref: '#/responses/record-saved'
      summary: Update Tag
      tags:
      - Tags
  /services/{serviceId}/templates:
    get:
      operationId: list-templates
      parameters:
      - $ref: '#/parameters/serviceId'
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - body: Welcome to the Hotel California!
              createdAt: '1998-09-16T03:31:59.791Z'
              id: 73a6f8ea-21a1-09f0-bb53-fc71f8a305f7
              name: Welcome message
              updatedAt: '1991-07-17T01:43:16.160Z'
            - body: We are sorry to see you go!
              createdAt: '1972-09-01T00:28:56.859Z'
              id: a4564607-a0d2-3208-aff9-5dc535291a2c
              name: Checkout message
              updatedAt: '1978-09-11T19:23:16.877Z'
            - body: It looks like your requested item was delivered. Please let us
                know if you have any more questions.
              createdAt: '1967-03-23T01:15:19.276Z'
              id: 26f989cf-4a40-7369-12b8-1d38565ac170
              name: Follow-up
              updatedAt: '1965-01-27T08:09:50.060Z'
          schema:
            items:
              $ref: '#/definitions/template'
            type: array
      summary: List Templates
      tags:
      - Templates
    parameters:
    - default: 1111-1111-1111-1111
      in: path
      name: serviceId
      required: true
      type: string
    post:
      operationId: create-template
      parameters:
      - $ref: '#/parameters/serviceId'
      - in: body
        name: body
        schema:
          $ref: '#/definitions/template-input'
        x-examples:
          application/json:
            body: May I please have your name?
            name: Ask for name
      responses:
        '201':
          $ref: '#/responses/record-saved'
      summary: Create a template
      tags:
      - Templates
  /services/{serviceId}/templates/{templateId}:
    delete:
      operationId: delete-template
      parameters:
      - $ref: '#/parameters/serviceId'
      - $ref: '#/parameters/templateId'
      responses:
        '204':
          $ref: '#/responses/record-deleted'
      summary: Delete template
      tags:
      - Templates
    get:
      operationId: get-template
      parameters:
      - $ref: '#/parameters/serviceId'
      - $ref: '#/parameters/templateId'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              body: Welcome to the Hotel California!
              createdAt: '2014-02-09T23:20:18.906Z'
              id: f1e2cfd1-51e3-01b6-3b7a-2f1cdfad3261
              name: Welcome message
              updatedAt: '2012-05-07T10:42:07.598Z'
          schema:
            $ref: '#/definitions/template'
      summary: Get a template
      tags:
      - Templates
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: templateId
      required: true
      type: string
    put:
      operationId: update-template
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/template-input'
        x-examples:
          application/json:
            body: Welcome to the Hotel California
            name: Welcome message
      - $ref: '#/parameters/serviceId'
      - $ref: '#/parameters/templateId'
      responses:
        '202':
          $ref: '#/responses/record-saved'
      summary: Update template
      tags:
      - Templates
  /services/{serviceId}/usage:
    get:
      responses:
        '200':
          description: ''
          schema:
            properties:
              purchased:
                type: integer
              total:
                type: integer
            type: object
      summary: Current usage
      tags:
      - Billing
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
  /services/{serviceId}/users:
    get:
      operationId: list-users
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - createdAt: '2005-07-16T21:59:16.306Z'
              email: 'off'
              firstName: Duis
              hotsosLogin: si
              id: 34439a01-1118-8e94-daa1-9c2dda874d8e
              lastName: n
              phone: 'ullamco '
              signature: pariatur c
              title: ''
              updatedAt: '2012-02-20T08:42:29.242Z'
              username: cupidata
            - createdAt: '1961-09-24T15:42:04.121Z'
              email: ex
              firstName: 'sit ea in '
              hotsosLogin: 'et aliqua '
              id: f053a006-1cd6-6d0c-d299-0b47efa1608c
              lastName: v
              phone: dolo
              signature: incidid
              title: ''
              updatedAt: '1968-07-21T10:20:47.026Z'
              username: enim co
            - createdAt: '1967-11-25T09:34:37.790Z'
              email: culpa e
              firstName: dolor
              hotsosLogin: Ut Duis
              id: fbdd60da-d024-fbcf-ffb2-2ed166b94287
              lastName: e
              phone: vo
              signature: 'et dolore '
              title: ut u
              updatedAt: '1958-01-15T10:41:31.735Z'
              username: inci
            - createdAt: '1993-05-09T12:38:21.994Z'
              email: enim ame
              firstName: culpa
              hotsosLogin: nisi adi
              id: 7b40ec1d-f511-7787-5c81-ea0d6af44488
              lastName: ea
              phone: 'et mollit '
              signature: ut Ut anim
              title: mol
              updatedAt: '1951-06-12T19:32:52.888Z'
              username: c
          schema:
            items:
              $ref: '#/definitions/user'
            type: array
      summary: List Users
      tags:
      - Users
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      operationId: create-user
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/user-create-input'
        x-examples:
          application/json:
            email: foo@example.com
            firstName: Foo
            lastName: User
            uiRole: dashboard_administrator
            username: foo@example.com
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Create User
  /services/{serviceId}/users/{userId}:
    delete:
      description: Removes a user's service role
      operationId: delete-service-user
      responses:
        '200':
          description: OK
      summary: Delete user from service
      tags:
      - Users
    parameters:
    - format: uuid
      in: path
      name: serviceId
      required: true
      type: string
    - format: uuid
      in: path
      name: userId
      required: true
      type: string
    put:
      description: Update a service user
      operationId: update-service-user
      parameters:
      - in: body
        name: body
        schema:
          properties:
            firstName:
              type: string
            lastName:
              type: string
            uiRole:
              enum:
              - dashboard_administrator
              - dashboard_standard
              - dashboard_standard_with_bulk_messaging
              - dashboard_standard_with_contact_deletion
              - dashboard_standard_with_analytics
              - dashboard_standard_with_bulk_messaging_with_contact_deletion
              - dashboard_standard_with_bulk_messaging_with_analytics
              - dashboard_standard_with_bulk_messaging_with_contact_deletion_with_analytics
              - dashboard_standard_with_contact_deletion_with_analytics
              - dashboard_standard_with_user_management
              - dashboard_standard_with_analytics_with_user_management
              - dashboard_standard_with_bulk_messaging_with_user_management
              - dashboard_standard_with_bulk_messaging_with_analytics_with_user_management
              - dashboard_standard_with_bulk_messaging_with_contact_deletion_with_user_management
              - dashboard_standard_with_bulk_messaging_with_contact_deletion_with_analytics_with_user_management
              - dashboard_standard_with_contact_deletion_with_user_management
              - dashboard_standard_with_contact_deletion_with_analytics_with_user_management
              type: string
          type: object
      responses:
        '200':
          description: OK
      summary: Update a service user
      tags:
      - Users
  /services/{serviceId}/webhooks:
    get:
      operationId: list-webhooks
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - enabled: true
              events:
              - et el
              - veniam laboris eiusmod do
              - id
              headers:
              - key: eiusmod
                value: in commodo ipsum esse
              - key: voluptate
                value: ex
              id: 2d338bc5-16a3-9eff-9b52-5f01cfdae265
              url: https://Hv
            - enabled: true
              events:
              - laboris velit
              - incididunt voluptate nisi e
              - enim consequat
              - proident
              - Excepteur ipsum culpa dolore
              headers:
              - key: Ut commodo veniam
                value: occaecat eiusmod ut
              - key: qui anim ut ad velit
                value: nisi Duis incididunt fugiat do
              id: cfdbad62-52ff-89ba-6da1-48121dbebde6
              url: https://dl
            - enabled: false
              events:
              - exercitation
              - enim magna dolor nisi culpa
              - d
              - ullamco
              - ipsum
              headers:
              - key: veniam et
                value: adi
              - key: in elit ut enim pariatur
                value: ea do
              id: d1359016-5b9f-3076-349b-5e520392019e
              url: http://gKh
          schema:
            items:
              $ref: '#/definitions/webhook'
            type: array
      summary: List Webhooks
      tags:
      - Webhooks
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    post:
      consumes:
      - application/json
      operationId: create-webhook
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/webhook-input'
        x-examples:
          application/json:
            enabled: true
            events:
            - veniam Lorem
            headers:
            - key: laboris in enim consequat mollit
              value: aliqua sed enim culpa occaecat
            - key: sed ea in ipsum
              value: proident reprehenderit dolore
            - key: elit sit
              value: incid
            - key: occaecat fugiat exercitation laboris
              value: aute laborum dolore dolore aliquip
            - key: id
              value: enim pariatur eiusm
            url: https://ks
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Create a Webhook
      tags:
      - Webhooks
    put:
      description: 'Sets '
      operationId: update-webhooks
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - enabled: true
              events:
              - sint occaecat
              - qui
              - commodo
              - culpa cupidatat anim id
              - dolor
              headers:
              - key: reprehenderit officia sunt enim
                value: do dolor ut ipsum
              - key: in Ut ex exercitation irure
                value: ut non veniam
              - key: anim qui proident dolor laborum
                value: ipsum
              url: https://ZJ
            - enabled: false
              events:
              - sint commodo ut elit Excepteur
              headers:
              - key: minim dolore dolore adipisicing
                value: anim veniam nulla proident
              - key: exercitation ea occaecat
                value: dolore
              - key: dolore Lorem irure
                value: proident ullamco minim tempo
              - key: proident dolore elit
                value: tempor amet aliquip
              url: https://vF
            - enabled: true
              events:
              - aliqua in deserunt
              - elit dolore deserunt cillum occaecat
              - in in laborum aute
              - cillum cupidatat
              headers:
              - key: elit
                value: aute dolore culpa en
              - key: tempor veniam
                value: l
              - key: est tempor labore
                value: deserunt Lorem reprehenderit
              - key: eu aliqua nostrud ex
                value: dolore consectetur ipsum sed
              - key: minim dolor occaecat
                value: Excepteur
              url: https://DG
            - enabled: false
              events:
              - dolor irure aute sed
              headers:
              - key: Excepteur
                value: voluptate cupidatat ipsum
              - key: irure ut
                value: consequat
              - key: labor
                value: ut
              - key: dolor Lorem velit
                value: reprehenderit
              url: https://iD
            - enabled: false
              events:
              - amet eu sint
              - dolor minim dolore mollit in
              - do officia
              - exercitation ex pariatur
              headers:
              - key: Lorem eu in
                value: exercitation aliquip cillum dolor est
              url: http://nwl
          schema:
            items:
              $ref: '#/definitions/webhook-input'
            type: array
      summary: Update All Webhooks
      tags:
      - Webhooks
  /services/{serviceId}/webhooks/{webhookId}:
    delete:
      operationId: delete-webhook
      responses:
        '202':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Delete a Webhook
      tags:
      - Webhooks
    get:
      operationId: get-webhook
      responses:
        '200':
          description: ''
          examples:
            application/json:
              enabled: true
              events:
              - aliqu
              headers:
              - key: id aliqua cillum dolor
                value: ullamco consequat est
              id: e13a4a69-df8b-a2bb-c59a-c16244b35560
              url: http://AFG
          schema:
            $ref: '#/definitions/webhook'
      summary: Get a webhook
      tags:
      - Webhooks
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: webhookId
      required: true
      type: string
    post:
      consumes:
      - application/json
      operationId: create-webhook
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/webhook-input'
        x-examples:
          application/json:
            enabled: false
            events:
            - ea ut deserunt labore enim
            - sit id laborum fugiat
            - nisi
            - magna ad reprehen
            headers:
            - key: elit
              value: cupidatat labore
            - key: qui
              value: esse ex
            - key: proident eu laboris non amet
              value: elit nostrud Lorem qui commodo
            - key: ex
              value: labore in
            - key: sed non ad velit
              value: id
            url: http://NWk
      responses:
        '201':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Create a Webhook
      tags:
      - Webhooks
    put:
      operationId: update-webhook
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/webhook-input'
        x-examples:
          application/json:
            enabled: true
            events:
            - Excepteur ex
            - laborum ea sunt Duis proident
            - ut commodo in occaecat id
            - dolore incididunt Ut nisi
            headers:
            - key: nisi eiusm
              value: aliqua eu eiusmod sit pariatur
            url: https://sx
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Update a Webhook
      tags:
      - Webhooks
  /services/{serviceId}/zings/{zingId}/start:
    parameters:
    - in: path
      name: serviceId
      required: true
      type: string
    - in: path
      name: zingId
      required: true
      type: string
    post:
      description: Receive a contact id, external id or phone number to identify a
        contact and start the workflow specified in the url.
      parameters:
      - in: body
        name: body
        schema:
          oneOf:
          - properties:
              contactId:
                type: integer
            required:
            - contactId
          - properties:
              externalId:
                type: string
            required:
            - externalId
          - properties:
              phoneNumber:
                type: string
            required:
            - phoneNumber
          type: object
        x-examples:
          application/json:
            phoneNumber: '+131777814'
      - in: path
        name: serviceId
        required: true
        type: integer
      - in: path
        name: zingId
        required: true
        type: integer
      responses:
        '204':
          description: ''
          schema:
            properties: {}
            type: object
        '500':
          description: ''
      summary: Start a new workflow for the specified contact
  /services/{serviceUuid}/contacts:
    get:
      operationId: list-contacts
      parameters:
      - in: body
        name: body
        schema: {}
      - $ref: '#/parameters/mentions'
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - avatar: null
              channels:
              - isActive: true
                type: phone_number
                value: '+14065559898'
              contactFields:
              - contactFieldName: Checkin Date
                value: '2018-09-03'
              - contactFieldName: Room Number
                value: 220
              conversationProperties:
                assignedToTeamId: null
                assignedToUserId: null
                isClosed: true
                isUnread: false
              externalId: a09sd80a9sd809a8sd098asd
              firstName: Cindy
              lastName: Smith
              notes: This is a very nice person
              tags:
              - Checked In
              - VIP
              title: Ms.
            - avatar: null
              channels:
              - isActive: true
                type: phone_number
                value: '+18585551212'
              contactFields: []
              conversationProperties:
                assignedToTeamId: null
                assignedToUserId: null
                isClosed: true
                isUnread: false
              externalId: null
              firstName: Bob
              lastName: Williams
              notes: null
              tags:
              - VIP
              title: Mr.
          schema:
            properties:
              _links:
                properties:
                  self:
                    type: string
                type: object
              currentPage:
                type: integer
              items:
                items:
                  allOf:
                  - $ref: '#/definitions/object-id'
                  - $ref: '#/definitions/contact-input'
                  - $ref: '#/definitions/AvatarUrl'
                  - $ref: '#/definitions/timestamps'
                  - $ref: '#/definitions/Events'
                type: array
              lastPage:
                type: integer
              perPage:
                type: integer
              total:
                type: integer
            type: object
      summary: List Contacts
      tags:
      - Contacts
    parameters:
    - in: path
      name: serviceUuid
      required: true
      type: string
    post:
      operationId: create-contact
      parameters:
      - description: 'One of the following is required:


          * firstName

          * lastName

          * externalId

          * at least one channel object

          * at least one contactFields object'
        in: body
        name: body
        schema:
          allOf:
          - $ref: '#/definitions/contact-input'
          - properties:
              avatar:
                $ref: '#/definitions/attachment'
            type: object
        x-examples:
          application/json:
            avatar: null
            channels:
            - isActive: true
              type: phone_number
              value: '+14065559898'
            contactFields:
            - contactFieldName: Checkin Date
              value: '2018-08-30'
            - contactFieldName: Room Number
              value: 200
            conversationProperties:
              assignedToTeamId: null
              assignedToUserId: null
              isClosed: true
              isUnread: false
            externalId: a09sd80a9sd809a8sd098asd
            firstName: Cindy
            lastName: Smith
            notes: This is a very nice person
            tags:
            - Checked In
            - VIP
            title: Ms.
      responses:
        '200':
          $ref: '#/responses/record-saved'
      summary: Create Contact
      tags:
      - Contacts
  /services/{serviceUuid}/contacts/export:
    get:
      parameters:
      - in: body
        name: body
        schema:
          properties:
            conditions:
              items:
                properties:
                  comparisonMethodCode:
                    type: string
                  comparisonSource:
                    type: string
                  comparisonValue:
                    type:
                    - string
                    - number
                    - integer
                    - boolean
                type: object
              type: array
            contactIds:
              description: Should contact integer ids.
              items:
                type: integer
              type: array
            searchTerm:
              type: string
          type: object
      responses:
        '200':
          description: CSV when given a list of contact integer ids and that list
            is under the limit that is reasonable to stream.
          schema:
            properties: {}
            type: object
        '204':
          description: When request is received and successfully queued up for export.
        '401':
          description: When request is not properly authorized.
        '404':
          description: When service is not found
      summary: Export contacts
      tags:
      - Contacts
    parameters:
    - in: path
      name: serviceUuid
      required: true
      type: string
  /services/{serviceUuid}/contacts/ref/{externalContactId}:
    delete:
      operationId: delete-contact-by-external
      responses:
        '307':
          $ref: '#/responses/see-other'
      summary: Delete Contact by customer-defined ID
      tags:
      - Contacts
    get:
      operationId: get-contact-by-external
      responses:
        '307':
          $ref: '#/responses/see-other'
      summary: Get Contact by customer-defined ID
      tags:
      - Contacts
    parameters:
    - in: path
      name: serviceUuid
      required: true
      type: string
    - in: path
      name: externalContactId
      required: true
      type: string
    put:
      operationId: update-contact-by-external
      responses:
        '307':
          $ref: '#/responses/see-other'
      summary: Update Contact by customer-defined ID
      tags:
      - Contacts
  /services/{serviceUuid}/contacts/{contactUuid}:
    delete:
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Delete Contact
    get:
      operationId: get-contact
      responses:
        '200':
          description: ''
          examples:
            application/json:
              avatar: null
              channels:
              - isActive: true
                type: phone_number
                value: '+14065559898'
              contactFields:
              - contactFieldName: Checkin Date
                value: '2018-08-30'
              - contactFieldName: Room Number
                value: 200
              conversationProperties:
                assignedToTeamId: null
                assignedToUserId: null
                isClosed: true
                isUnread: false
              externalId: a09sd80a9sd809a8sd098asd
              firstName: Cindy
              id: 6108ab77-db7e-40c8-950e-46fc87b50ed1
              lastName: Smith
              notes: This is a very nice person
              tags:
              - Checked In
              - VIP
              title: Ms.
          schema:
            allOf:
            - $ref: '#/definitions/object-id'
            - $ref: '#/definitions/contact-input'
            - $ref: '#/definitions/timestamps'
            - properties:
                avatarUrl:
                  type: string
              type: object
      summary: Get Contact
      tags:
      - Contacts
    parameters:
    - in: path
      name: serviceUuid
      required: true
      type: string
    - in: path
      name: contactUuid
      required: true
      type: string
    put:
      parameters:
      - in: body
        name: body
        schema:
          allOf:
          - $ref: '#/definitions/contact-input'
          - properties:
              avatar:
                $ref: '#/definitions/attachment'
            type: object
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Update Contact
  /services/{serviceUuid}/users/{userId}:
    get:
      operationId: list-users
      parameters:
      - description: API allowing somebody to search for a single user by exact username
        in: query
        name: username
        type: string
      responses:
        '200':
          description: ''
          examples:
            application/json:
            - createdAt: '2005-07-16T21:59:16.306Z'
              email: 'off'
              firstName: Duis
              hotsosLogin: si
              id: 34439a01-1118-8e94-daa1-9c2dda874d8e
              lastName: n
              phone: 'ullamco '
              signature: pariatur c
              title: ''
              updatedAt: '2012-02-20T08:42:29.242Z'
              username: cupidata
            - createdAt: '1961-09-24T15:42:04.121Z'
              email: ex
              firstName: 'sit ea in '
              hotsosLogin: 'et aliqua '
              id: f053a006-1cd6-6d0c-d299-0b47efa1608c
              lastName: v
              phone: dolo
              signature: incidid
              title: ''
              updatedAt: '1968-07-21T10:20:47.026Z'
              username: enim co
            - createdAt: '1967-11-25T09:34:37.790Z'
              email: culpa e
              firstName: dolor
              hotsosLogin: Ut Duis
              id: fbdd60da-d024-fbcf-ffb2-2ed166b94287
              lastName: e
              phone: vo
              signature: 'et dolore '
              title: ut u
              updatedAt: '1958-01-15T10:41:31.735Z'
              username: inci
            - createdAt: '1993-05-09T12:38:21.994Z'
              email: enim ame
              firstName: culpa
              hotsosLogin: nisi adi
              id: 7b40ec1d-f511-7787-5c81-ea0d6af44488
              lastName: ea
              phone: 'et mollit '
              signature: ut Ut anim
              title: mol
              updatedAt: '1951-06-12T19:32:52.888Z'
              username: c
          schema:
            items:
              $ref: '#/definitions/user'
            type: array
      summary: List Users
      tags:
      - Users
    parameters:
    - in: path
      name: serviceUuid
      required: true
      type: string
    - in: path
      name: userId
      required: true
      type: string
    post:
      description: ''
      operationId: create-user
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/user-create-input'
        x-examples:
          application/json:
            email: foo@example.com
            firstName: Foo
            lastName: User
            uiRole: dashboard_administrator
            username: foo@example.com
      responses:
        '200':
          description: ''
          schema:
            properties: {}
            type: object
      summary: Create User
      tags:
      - Users
  /token:
    post:
      parameters:
      - in: query
        name: privilege
        type: string
      responses:
        '200':
          description: JWT Auth Token
          schema:
            properties:
              token:
                type: string
            type: object
        '401':
          description: Token is expired
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get a JWT token used for Auth
      tags:
      - Security
  /token/refresh:
    get:
      responses:
        '200':
          description: ''
          schema:
            properties:
              token:
                type: string
            type: object
        '400':
          description: ''
      security:
      - jwt: []
      summary: Refresh JWT Token
      tags:
      - Security
  /users/account-access:
    delete:
      responses:
        '204':
          description: ''
          schema:
            properties: {}
            type: object
      security:
      - jwt: []
      summary: Revoke account access
      tags:
      - Users
    get:
      parameters:
      - in: query
        name: page
        type: integer
      responses:
        '200':
          description: ''
          schema:
            properties:
              _links:
                properties:
                  self:
                    type: string
                type: object
              currentPage:
                type: integer
              items:
                items:
                  properties:
                    createdAt:
                      format: date-time
                      type: string
                    expiredAt:
                      format: date-time
                      type: string
                    revokedAt:
                      format: date-time
                      type:
                      - 'null'
                      - string
                    status:
                      enum:
                      - active
                      - expired
                      - revoked
                      type: string
                    updatedAt:
                      format: date-time
                      type: string
                  type: object
                type: array
              lastPage:
                type: integer
              perPage:
                type: integer
              total:
                type: integer
            type: object
      security:
      - jwt: []
      summary: List account access history
      tags:
      - Users
    post:
      responses:
        '204':
          description: ''
          schema:
            properties: {}
            type: object
      security:
      - jwt: []
      summary: Grant account access
      tags:
      - Users
  /users/me:
    get:
      operationId: get-user
      responses:
        '200':
          description: ''
          examples:
            application/json:
              avatarUrl: null
              createdAt: '1984-08-14T20:29:33.314Z'
              email: esmythe@zingleme.com
              firstName: Elias
              hotsosLogin: 'null'
              id: 3cc50f64-4c22-3d51-63a0-e572e98c31a5
              lastName: Smythe
              phone: 'null'
              signature: '- ES'
              title: Supervisor
              updatedAt: '1975-06-18T17:39:34.524Z'
              username: esmythe@zingleme.com
          schema:
            allOf:
            - $ref: '#/definitions/user-profile-input'
            - properties:
                avatarUrl:
                  type: string
              type: object
            - $ref: '#/definitions/object-id'
            - $ref: '#/definitions/timestamps'
      summary: Get the current User
      tags:
      - Users
    put:
      operationId: update-user
      parameters:
      - in: body
        name: body
        schema:
          allOf:
          - $ref: '#/definitions/user-profile-input'
          - properties:
              avatar:
                $ref: '#/definitions/attachment'
            type: object
        x-examples:
          application/json:
            avatar:
              content: reprehenderit ven
              filename: '`myavatar.png'
              mimeType: image/png
            email: cul
            firstName: m
            hotsosLogin: dolo
            lastName: ''
            phone: sun
            signature: ad
            title: 'pariatur '
            username: e
      responses:
        '202':
          $ref: '#/responses/record-saved'
      summary: Update the current User
      tags:
      - Users
  orgs/{organizationId}/contact-log:
    get:
      description: 'pull the contact-import logs for an org import

        '
      operationId: get-orgs-org_uuid
      parameters:
      - format: date-time
        in: query
        name: range[start]
        required: true
        type: string
      - format: date-time
        in: query
        name: range[end]
        required: true
        type: string
      - in: query
        name: query
        type: string
      - allowEmptyValue: true
        in: query
        name: services
        type: array
        uniqueItems: true
      responses: {}
      summary: Get contact import logs for services within an Organization
      tags:
      - Organization Contact Imports
      - Contact Import Log
    parameters:
    - in: path
      name: organizationId
      required: true
      type: string
swagger: '2.0'
